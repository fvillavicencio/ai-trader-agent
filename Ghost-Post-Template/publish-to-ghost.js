/**
 * Market Pulse Daily - Ghost Publisher
 * 
 * This script publishes the Market Pulse Daily report to Ghost.io using the Admin API.
 * It takes the mobiledoc JSON generated by generate-ghost-post.js and creates a new post.
 */

const fs = require('fs');
const path = require('path');
const GhostAdminAPI = require('@tryghost/admin-api');

// Load environment variables from .env file
const loadEnv = () => {
  try {
    const envPath = path.join(__dirname, 'src', '.env');
    const envContent = fs.readFileSync(envPath, 'utf8');
    
    // Parse .env file content
    const envVars = {};
    envContent.split('\n').forEach(line => {
      const match = line.match(/^([^=]+)="([^"]+)"$/);
      if (match) {
        envVars[match[1]] = match[2];
      }
    });
    
    return envVars;
  } catch (error) {
    console.error('Error loading .env file:', error);
    return {};
  }
};

/**
 * Determines if the content should be premium based on the time of day
 * Premium content is published before 4:30 PM ET
 * @returns {boolean} - Whether the content should be premium
 */
const isPremiumContent = () => {
  // Get current time in ET
  const now = new Date();
  const timeZone = 'America/New_York'; // ET timezone
  
  // Format the time to get hours and minutes
  const formatter = new Intl.DateTimeFormat('en-US', {
    timeZone,
    hour: 'numeric',
    minute: 'numeric',
    hour12: false
  });
  
  const timeString = formatter.format(now);
  const [hour, minute] = timeString.split(':').map(num => parseInt(num, 10));
  
  // Premium content is published before 4:30 PM ET
  return hour < 16 || (hour === 16 && minute < 30);
};

/**
 * Generates an engaging market-related title with a timestamp
 * @returns {string} - The formatted title
 */
const generateEngagingTitle = () => {
  const now = new Date();
  
  // Format time and date
  const formatter = new Intl.DateTimeFormat('en-US', {
    timeZone: 'America/New_York',
    hour: 'numeric',
    minute: 'numeric',
    hour12: true
  });
  
  const dateFormatter = new Intl.DateTimeFormat('en-US', {
    timeZone: 'America/New_York',
    month: 'long',
    day: 'numeric',
    year: 'numeric'
  });
  
  const time = formatter.format(now);
  const date = dateFormatter.format(now);
  
  // List of market phrases to choose from
  const marketPhrases = [
    "Market Currents", "Market Pulse", "Market Whisper", "Market Musings", "Market Rhythms",
    "Market Beats", "Market Insights", "Market Signals", "Market Watch", "Market Movements"
  ];
  
  // List of emojis to choose from
  const emojis = ["📊", "📈", "📉", "💰", "🔍", "🎯", "💡", "⚡", "💫", "🌟"];
  
  // Randomly select a phrase and emoji
  const phrase = marketPhrases[Math.floor(Math.random() * marketPhrases.length)];
  const emoji = emojis[Math.floor(Math.random() * emojis.length)];
  
  // Return the formatted title
  return `${phrase} ${emoji} - ${date} ${time} ET`;
};

/**
 * Gets the standard tags for Market Pulse Daily posts
 * @returns {Array} - Array of tag objects
 */
const getStandardTags = () => {
  return [
    { name: 'Market Insights' },
    { name: 'Daily Update' },
    { name: 'Market Pulse' }
  ];
};

// Load environment variables
const env = loadEnv();

// Ghost API configuration
const GHOST_URL = env.GHOST_URL || process.env.GHOST_URL || 'https://your-ghost-blog.ghost.io';
const GHOST_API_KEY = env.GHOST_API_KEY || process.env.GHOST_API_KEY;
const GHOST_API_VERSION = 'v4';

// Initialize the Ghost Admin API client
const api = new GhostAdminAPI({
  url: GHOST_URL,
  key: GHOST_API_KEY,
  version: GHOST_API_VERSION
});

// Load the mobiledoc JSON
const loadMobiledoc = () => {
  try {
    const mobiledocPath = path.join(__dirname, 'ghost-post.json');
    const rawData = fs.readFileSync(mobiledocPath, 'utf8');
    return JSON.parse(rawData);
  } catch (error) {
    console.error('Error loading mobiledoc:', error);
    process.exit(1);
  }
};

// Load the data JSON to get metadata
const loadData = () => {
  try {
    const dataPath = path.join(__dirname, 'full-dataset.json');
    const rawData = fs.readFileSync(dataPath, 'utf8');
    return JSON.parse(rawData);
  } catch (error) {
    console.error('Error loading data:', error);
    process.exit(1);
  }
};

// Main function
const main = async () => {
  try {
    // Check if API key is set
    if (!GHOST_API_KEY) {
      console.error('Error: Ghost API key not set. Please set the GHOST_API_KEY environment variable or add it to the .env file.');
      process.exit(1);
    }
    
    // Load the mobiledoc and data
    const mobiledoc = loadMobiledoc();
    const data = loadData();
    
    console.log('Publishing post to Ghost...');
    console.log(`Using Ghost URL: ${GHOST_URL}`);
    
    // Generate an engaging title
    const title = generateEngagingTitle();
    console.log(`Generated title: ${title}`);
    
    // Determine if content should be premium based on time of day
    const premium = isPremiumContent();
    const visibility = premium ? 'paid' : 'members';
    
    console.log(`Content type: ${premium ? 'Premium (Paid members only)' : 'Standard (All members)'}`);
    console.log(`Visibility: ${visibility}`);
    
    // Create the post using the Ghost Admin API client
    const post = await api.posts.add({
      title: title,
      mobiledoc: JSON.stringify(mobiledoc),
      status: 'published', // or 'draft' if you want to review before publishing
      tags: getStandardTags(),
      visibility: visibility,
      excerpt: data.decision ? data.decision.summary : 'Market analysis and trading insights',
      feature_image: process.env.FEATURE_IMAGE_URL || null, // Optional feature image URL
      published_at: new Date().toISOString()
    });
    
    console.log('Post published successfully!');
    console.log(`Post URL: ${post.url}`);
    
    return post;
  } catch (error) {
    console.error('Error publishing post:', error);
    process.exit(1);
  }
};

// Run the main function
main();
