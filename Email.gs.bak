/**
 * Formats the trading decision and full analysis as an HTML email
 * 
 * @param {string} decision - The trading decision (Buy Now, Sell Now, Watch for Better Price Action)
 * @param {Object} analysis - The full analysis object
 * @param {Date} analysisTime - The time of the current analysis
 * @param {Date} nextAnalysisTime - The time of the next scheduled analysis
 * @return {string} - The formatted HTML email body
 */
function formatHtmlEmailBodyWithAnalysis(decision, analysis, analysisTime, nextAnalysisTime) {
  const formattedAnalysisDate = Utilities.formatDate(analysisTime, TIME_ZONE, "MMMM dd, yyyy 'at' hh:mm a 'ET'");
  const formattedNextDate = Utilities.formatDate(nextAnalysisTime, TIME_ZONE, "MMMM dd, yyyy 'at' hh:mm a 'ET'");
  
  // Determine color based on decision
  let decisionColor = "#FFA500"; // Default orange for "Watch for Better Price Action"
  let decisionIcon = "‚ö†Ô∏è"; // Default icon for Watch
  let decisionBg = "#FFF8E1"; // Light yellow background
  
  if (decision.includes("Buy")) {
    decisionColor = "#4CAF50"; // Green for Buy
    decisionIcon = "üîº"; // Up arrow for Buy
    decisionBg = "#E8F5E9"; // Light green background
  } else if (decision.includes("Sell")) {
    decisionColor = "#F44336"; // Red for Sell
    decisionIcon = "üîΩ"; // Down arrow for Sell
    decisionBg = "#FFEBEE"; // Light red background
  }
  
  // Extract data from the analysis object
  const summary = analysis.summary || "No summary available";
  const justification = analysis.justification || "No justification available";
  
  // Format market sentiment section
  let marketSentimentHtml = "<p>No market sentiment data available</p>";
  if (analysis.analysis && analysis.analysis.marketSentiment) {
    let sentimentClass = "neutral";
    if (analysis.analysis.marketSentiment.overall) {
      if (analysis.analysis.marketSentiment.overall.toLowerCase().includes("bullish")) {
        sentimentClass = "bullish";
      } else if (analysis.analysis.marketSentiment.overall.toLowerCase().includes("bearish")) {
        sentimentClass = "bearish";
      }
    }
    
    marketSentimentHtml = `${analysis.analysis.marketSentiment.overall ? 
        `<div class="overall-sentiment ${sentimentClass}" style="padding: 10px; margin-bottom: 15px; border-radius: 5px; background-color: ${sentimentClass === 'bullish' ? '#e8f5e9' : sentimentClass === 'bearish' ? '#ffebee' : '#f5f5f5'}; border-left: 4px solid ${sentimentClass === 'bullish' ? '#4caf50' : sentimentClass === 'bearish' ? '#f44336' : '#9e9e9e'};">
          <h3 style="margin: 0 0 8px 0; font-size: 16px;">Overall Market Sentiment: <span style="color: ${sentimentClass === 'bullish' ? '#4caf50' : sentimentClass === 'bearish' ? '#f44336' : '#757575'};">${analysis.analysis.marketSentiment.overall}</span></h3>
        </div>` : ''}
        
        ${analysis.analysis.marketSentiment.analysts && Array.isArray(analysis.analysis.marketSentiment.analysts) ? 
          `<div class="analysts-container" style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;">
            ${analysis.analysis.marketSentiment.analysts.map(analyst => `
              <div class="analyst" style="flex: 1 1 300px; padding: 12px; margin-bottom: 10px; background-color: #ffffff; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-top: 3px solid #2196f3;">
                <div class="analyst-name" style="font-weight: bold; color: #2196f3; margin-bottom: 5px;">${analyst.analyst}</div>
                <div class="comment" style="font-style: italic; margin-bottom: 8px; color: #424242;">"${analyst.comment}"</div>
                ${analyst.mentionedSymbols && analyst.mentionedSymbols.length > 0 ? 
                  `<div class="symbols" style="margin-top: 5px;">
                    <span style="font-size: 12px; color: #757575;">Mentioned: </span>
                    ${analyst.mentionedSymbols.map(symbol => 
                      `<span style="display: inline-block; padding: 2px 6px; margin: 2px; background-color: #e3f2fd; border-radius: 3px; font-size: 12px; color: #1976d2;">${symbol}</span>`
                    ).join('')}
                  </div>` : ''}
                ${analyst.source ? `<div class="source" style="font-size: 12px; margin-top: 3px;">Source: <a href="${analyst.sourceUrl || '#'}" target="_blank" style="color: #2196f3; text-decoration: none;">${analyst.source}</a></div>` : ''}
              </div>
            `).join('')}
          </div>` : ''}`;
  }
  
  // Format market indicators section
  let marketIndicatorsHtml = "<p>No market indicator data available</p>";
  if (analysis.analysis && analysis.analysis.marketIndicators) {
    marketIndicatorsHtml = "<div style='margin-top: 10px;'>";
    
    // Fear & Greed Index
    if (analysis.analysis.marketIndicators.fearGreedIndex) {
      const fgi = analysis.analysis.marketIndicators.fearGreedIndex;
      const fgiValue = parseInt(fgi.value) || 50;
      const fgiColor = fgiValue <= 25 ? '#f44336' : 
                       fgiValue <= 40 ? '#ff9800' : 
                       fgiValue <= 60 ? '#ffeb3b' : 
                       fgiValue <= 75 ? '#8bc34a' : '#4caf50';
      
      marketIndicatorsHtml += `
        <div style="margin-bottom: 15px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="display: flex; align-items: center; margin-bottom: 8px;">
            <div style="font-weight: bold; font-size: 16px; margin-right: 10px;">Fear & Greed Index:</div>
            <div style="font-size: 18px; font-weight: bold; color: ${fgiColor};">${fgi.value}</div>
          </div>
          <div style="height: 10px; background-color: #e0e0e0; border-radius: 5px; margin: 8px 0;">
            <div style="height: 100%; width: ${Math.min(Math.max(fgiValue, 0), 100)}%; background-color: ${fgiColor}; border-radius: 5px;"></div>
          </div>
          <div style="display: flex; justify-content: space-between; font-size: 12px; color: #757575; margin-top: 3px;">
            <span>Extreme Fear</span>
            <span>Fear</span>
            <span>Neutral</span>
            <span>Greed</span>
            <span>Extreme Greed</span>
          </div>
          <div style="margin-top: 8px; font-style: italic; color: #616161;">${fgi.interpretation || ''}</div>
          ${fgi.source || fgi.lastUpdated ? 
            `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
              ${fgi.source ? 
                `Source: ${fgi.sourceUrl ? 
                  `<a href="${fgi.sourceUrl}" style="color: #607d8b; text-decoration: none;">${fgi.source}</a>` : 
                  fgi.source}` : ''}
              ${fgi.source && fgi.lastUpdated ? ' | ' : ''}
              ${fgi.lastUpdated ? `Last updated: ${fgi.lastUpdated}` : ''}
            </div>` : ''}
        </div>`;
    }
    
    // VIX
    if (analysis.analysis.marketIndicators.vix) {
      const vix = analysis.analysis.marketIndicators.vix;
      const vixTrendIcon = vix.trend && vix.trend.toLowerCase().includes('rising') ? '‚ÜóÔ∏è' : 
                           vix.trend && vix.trend.toLowerCase().includes('falling') ? '‚ÜòÔ∏è' : '‚û°Ô∏è';
      const vixTrendColor = vix.trend && vix.trend.toLowerCase().includes('rising') ? '#f44336' : 
                            vix.trend && vix.trend.toLowerCase().includes('falling') ? '#4caf50' : '#757575';
      
      marketIndicatorsHtml += `
        <div style="margin-bottom: 15px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="display: flex; align-items: center; margin-bottom: 5px;">
            <div style="font-weight: bold; font-size: 16px; margin-right: 10px;">VIX:</div>
            <div style="font-size: 18px; font-weight: bold;">${vix.value}</div>
            <div style="margin-left: 10px; color: ${vixTrendColor}; font-weight: bold;">${vixTrendIcon} ${vix.trend || ''}</div>
          </div>
          <div style="margin-top: 5px; color: #616161;">${vix.analysis || ''}</div>
          ${vix.source || vix.lastUpdated ? 
            `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
              ${vix.source ? 
                `Source: ${vix.sourceUrl ? 
                  `<a href="${vix.sourceUrl}" style="color: #607d8b; text-decoration: none;">${vix.source}</a>` : 
                  vix.source}` : ''}
              ${vix.source && vix.lastUpdated ? ' | ' : ''}
              ${vix.lastUpdated ? `Last updated: ${vix.lastUpdated}` : ''}
            </div>` : ''}
        </div>`;
    }
    
    // Upcoming Events
    if (analysis.analysis.marketIndicators.upcomingEvents && analysis.analysis.marketIndicators.upcomingEvents.length > 0) {
      marketIndicatorsHtml += `
        <div style="margin-bottom: 15px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px;">Upcoming Events:</div>
          <div style="display: flex; flex-direction: column; gap: 8px;">
            ${analysis.analysis.marketIndicators.upcomingEvents.map(event => `
              <div style="display: flex; align-items: center; padding: 8px; background-color: #ffffff; border-radius: 4px; border-left: 3px solid #2196f3;">
                <div style="min-width: 100px; font-weight: bold; color: #2196f3;">${event.date} | </div>
                <div>${event.event}</div>
              </div>
            `).join('')}
          </div>
          ${analysis.analysis.marketIndicators.source || analysis.analysis.marketIndicators.lastUpdated ? 
            `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
              ${analysis.analysis.marketIndicators.source ? 
                `Source: ${analysis.analysis.marketIndicators.sourceUrl ? 
                  `<a href="${analysis.analysis.marketIndicators.sourceUrl}" style="color: #607d8b; text-decoration: none;">${analysis.analysis.marketIndicators.source}</a>` : 
                  analysis.analysis.marketIndicators.source}` : ''}
              ${analysis.analysis.marketIndicators.source && analysis.analysis.marketIndicators.lastUpdated ? ' | ' : ''}
              ${analysis.analysis.marketIndicators.lastUpdated ? `Last updated: ${analysis.analysis.marketIndicators.lastUpdated}` : ''}
            </div>` : ''}
        </div>`;
    }
    
    marketIndicatorsHtml += "</div>";
  }
  
  // Format fundamental metrics section
  let fundamentalMetricsHtml = "<p>No fundamental metrics data available</p>";
  if (analysis.analysis && analysis.analysis.fundamentalMetrics && analysis.analysis.fundamentalMetrics.length > 0) {
    fundamentalMetricsHtml = `
      <div style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 10px; justify-content: space-between;">
        ${analysis.analysis.fundamentalMetrics.map(metric => {
          const isPEGood = metric.pegRatio && metric.pegRatio !== "N/A" && parseFloat(metric.pegRatio) < 1.5;
          const isPEBad = metric.pegRatio && metric.pegRatio !== "N/A" && parseFloat(metric.pegRatio) > 2.5;
          const isPEColor = isPEGood ? '#4caf50' : isPEBad ? '#f44336' : '#757575';
          
          const isFPEGood = metric.forwardPE && metric.forwardPE !== "N/A" && parseFloat(metric.forwardPE) < 20;
          const isFPEBad = metric.forwardPE && metric.forwardPE !== "N/A" && parseFloat(metric.forwardPE) > 30;
          const isFPEColor = isFPEGood ? '#4caf50' : isFPEBad ? '#f44336' : '#757575';
          
          const isPBGood = metric.priceBook && metric.priceBook !== "N/A" && parseFloat(metric.priceBook) < 3;
          const isPBBad = metric.priceBook && metric.priceBook !== "N/A" && parseFloat(metric.priceBook) > 7;
          const isPBColor = isPBGood ? '#4caf50' : isPBBad ? '#f44336' : '#757575';
          
          const isPSGood = metric.priceSales && metric.priceSales !== "N/A" && parseFloat(metric.priceSales) < 2;
          const isPSBad = metric.priceSales && metric.priceSales !== "N/A" && parseFloat(metric.priceSales) > 5;
          const isPSColor = isPSGood ? '#4caf50' : isPSBad ? '#f44336' : '#757575';
          
          const isROEGood = metric.returnOnEquity && metric.returnOnEquity !== "N/A" && parseFloat(metric.returnOnEquity) > 15;
          const isROEBad = metric.returnOnEquity && metric.returnOnEquity !== "N/A" && parseFloat(metric.returnOnEquity) < 5;
          const isROEColor = isROEGood ? '#4caf50' : isROEBad ? '#f44336' : '#757575';
          
          // Format price change with color
          const priceChange = metric.priceChange || 0;
          const priceChangePercent = metric.priceChangePercent || 0;
          const priceChangeColor = parseFloat(priceChange) >= 0 ? '#4caf50' : '#f44336';
          const priceChangeIcon = parseFloat(priceChange) >= 0 ? '‚ñ≤' : '‚ñº';
          
          return `
            <div style="flex: 1 1 48%; max-width: 48%; padding: 15px; background-color: #ffffff; border-radius: 6px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); border-top: 3px solid #673ab7;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <div style="font-weight: bold; font-size: 18px; color: #673ab7;">${metric.symbol}</div>
                <div style="font-size: 12px; color: #9e9e9e; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 170px;">${metric.name || ''}</div>
              </div>
              
              <!-- Price and Change Information -->
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; padding: 8px; background-color: #f5f5f5; border-radius: 4px;">
                <div>
                  <div style="font-size: 18px; font-weight: bold;">${metric.price ? (metric.price.toString().startsWith('$') ? metric.price : '$' + metric.price) : 'N/A'}</div>
                  ${metric.priceChange ? 
                    `<div style="color: ${priceChangeColor}; font-weight: bold; font-size: 14px;">
                      ${priceChangeIcon} ${priceChange > 0 ? '+' : ''}${priceChange} (${priceChangePercent}%)
                    </div>` : ''}
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 12px; color: #757575;">Volume</div>
                  <div style="font-weight: bold; font-size: 14px;">${metric.volume ? metric.volume.toLocaleString() : 'N/A'}</div>
                </div>
              </div>
              
              <!-- Key Metrics -->
              <div style="margin-bottom: 12px;">
                <div style="font-weight: bold; font-size: 14px; margin-bottom: 6px; color: #424242;">Key Metrics</div>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 6px;">
                  ${metric.pegRatio && metric.pegRatio !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">PEG Ratio</div>
                      <div style="font-weight: bold; font-size: 12px; color: ${isPEColor};">${metric.pegRatio}</div>
                    </div>` : ''}
                  
                  ${metric.forwardPE && metric.forwardPE !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Forward P/E</div>
                      <div style="font-weight: bold; font-size: 12px; color: ${isFPEColor};">${metric.forwardPE}</div>
                    </div>` : ''}
                    
                  ${metric.priceBook && metric.priceBook !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Price/Book</div>
                      <div style="font-weight: bold; font-size: 12px; color: ${isPBColor};">${metric.priceBook}</div>
                    </div>` : ''}
                    
                  ${metric.priceSales && metric.priceSales !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Price/Sales</div>
                      <div style="font-weight: bold; font-size: 12px; color: ${isPSColor};">${metric.priceSales}</div>
                    </div>` : ''}
                    
                  ${metric.debtEquity && metric.debtEquity !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Debt/Equity</div>
                      <div style="font-weight: bold; font-size: 12px;">${metric.debtEquity}</div>
                    </div>` : ''}
                    
                  ${metric.returnOnEquity && metric.returnOnEquity !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">ROE</div>
                      <div style="font-weight: bold; font-size: 12px; color: ${isROEColor};">${metric.returnOnEquity}%</div>
                    </div>` : ''}
                    
                  ${metric.beta && metric.beta !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Beta</div>
                      <div style="font-weight: bold; font-size: 12px;">${metric.beta}</div>
                    </div>` : ''}
                    
                  ${metric.marketCap && metric.marketCap !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Market Cap</div>
                      <div style="font-weight: bold; font-size: 12px;">${metric.marketCap}</div>
                    </div>` : ''}
                    
                  ${metric.dividendYield && metric.dividendYield !== "N/A" ? 
                    `<div style="padding: 5px 8px; background-color: #f5f5f5; border-radius: 4px;">
                      <div style="font-size: 11px; color: #757575;">Dividend Yield</div>
                      <div style="font-weight: bold; font-size: 12px;">${metric.dividendYield}%</div>
                    </div>` : ''}
                </div>
              </div>
              
              <!-- Analyst Comment -->
              ${metric.comment ? 
                `<div style="margin-top: 10px; padding: 8px; background-color: #f9f9f9; border-radius: 4px; border-left: 3px solid #673ab7;">
                  <div style="font-style: italic; font-size: 12px; color: #424242; line-height: 1.4;">${metric.comment}</div>
                </div>` : ''}
              
              <!-- Source and Timestamp -->
              ${metric.source || metric.lastUpdated ? 
                `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
                  ${metric.source ? 
                    `Source: ${metric.sourceUrl ? 
                      `<a href="${metric.sourceUrl}" style="color: #673ab7; text-decoration: none;">${metric.source}</a>` : 
                      metric.source}` : ''}
                  ${metric.source && metric.lastUpdated ? ' | ' : ''}
                  ${metric.lastUpdated ? `Last updated: ${metric.lastUpdated}` : ''}
                </div>` : ''}
            </div>
          `;
        }).join('')}
      </div>`;
  }
  
  // Format macroeconomic factors section
  let macroHtml = "<p>No macroeconomic factors data available</p>";
  if (analysis.analysis && analysis.analysis.macroeconomicFactors) {
    macroHtml = "<div style='margin-top: 10px;'>";
    const macro = analysis.analysis.macroeconomicFactors;
    
    // Treasury Yields
    if (macro.treasuryYields) {
      const yieldCurveColor = macro.treasuryYields.yieldCurve === 'inverted' ? '#f44336' : 
                             macro.treasuryYields.yieldCurve === 'flat' ? '#ff9800' : '#4caf50';
      
      macroHtml += `
        <div style="margin-bottom: 15px; padding: 15px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px; color: #333;">Treasury Yields</div>
          
          <div style="display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 10px;">
            ${macro.treasuryYields.threeMonth ? 
              `<div style="padding: 8px 12px; background-color: #e8f5e9; border-radius: 4px; border-left: 3px solid #4caf50;">
                <div style="font-size: 14px; color: #757575;">3-Month</div>
                <div style="font-size: 18px; font-weight: bold; color: #4caf50;">${macro.treasuryYields.threeMonth}%</div>
              </div>` : ''}
              
            ${macro.treasuryYields.oneYear ? 
              `<div style="padding: 8px 12px; background-color: #e8f5e9; border-radius: 4px; border-left: 3px solid #4caf50;">
                <div style="font-size: 14px; color: #757575;">1-Year</div>
                <div style="font-size: 18px; font-weight: bold; color: #4caf50;">${macro.treasuryYields.oneYear}%</div>
              </div>` : ''}
              
            ${macro.treasuryYields.twoYear ? 
              `<div style="padding: 8px 12px; background-color: #e8f5e9; border-radius: 4px; border-left: 3px solid #4caf50;">
                <div style="font-size: 14px; color: #757575;">2-Year</div>
                <div style="font-size: 18px; font-weight: bold; color: #4caf50;">${macro.treasuryYields.twoYear}%</div>
              </div>` : ''}
              
            ${macro.treasuryYields.tenYear ? 
              `<div style="padding: 8px 12px; background-color: #e8f5e9; border-radius: 4px; border-left: 3px solid #4caf50;">
                <div style="font-size: 14px; color: #757575;">10-Year</div>
                <div style="font-size: 18px; font-weight: bold; color: #4caf50;">${macro.treasuryYields.tenYear}%</div>
              </div>` : ''}
              
            ${macro.treasuryYields.thirtyYear ? 
              `<div style="padding: 8px 12px; background-color: #e8f5e9; border-radius: 4px; border-left: 3px solid #4caf50;">
                <div style="font-size: 14px; color: #757575;">30-Year</div>
                <div style="font-size: 18px; font-weight: bold; color: #4caf50;">${macro.treasuryYields.thirtyYear}%</div>
              </div>` : ''}
          </div>
          
          ${macro.treasuryYields.yieldCurve ? 
            `<div style="margin-top: 10px; padding: 8px 12px; background-color: #fafafa; border-radius: 4px; border-left: 3px solid ${yieldCurveColor};">
              <div style="font-weight: bold; color: ${yieldCurveColor};">Yield Curve: ${macro.treasuryYields.yieldCurve}</div>
              <div style="margin-top: 5px; font-style: italic; color: #616161;">${macro.treasuryYields.implications || ''}</div>
            </div>` : ''}
            
          ${macro.treasuryYields.source || macro.treasuryYields.lastUpdated ? 
            `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
              ${macro.treasuryYields.source ? 
                `Source: ${macro.treasuryYields.sourceUrl ? 
                  `<a href="${macro.treasuryYields.sourceUrl}" style="color: #607d8b; text-decoration: none;">${macro.treasuryYields.source}</a>` : 
                  macro.treasuryYields.source}` : ''}
              ${macro.treasuryYields.source && macro.treasuryYields.lastUpdated ? ' | ' : ''}
              ${macro.treasuryYields.lastUpdated ? `Last updated: ${macro.treasuryYields.lastUpdated}` : ''}
            </div>` : ''}
        </div>`;
    }
    
    // Federal Reserve Policy
    if (macro.federalReservePolicy) {
      macroHtml += `
        <div style="margin-bottom: 15px; padding: 15px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px; color: #333;">Federal Reserve Policy</div>
          
          ${macro.federalReservePolicy.currentRate ? 
            `<div style="display: flex; align-items: center; margin-bottom: 10px;">
              <div style="padding: 10px 15px; background-color: #e3f2fd; border-radius: 4px; border-left: 3px solid #2196f3;">
                <div style="font-size: 14px; color: #757575;">Current Fed Funds Rate</div>
                <div style="font-size: 18px; font-weight: bold; color: #2196f3;">${macro.federalReservePolicy.currentRate}%</div>
              </div>
            </div>` : ''}
          
          ${macro.federalReservePolicy.stance ? 
            `<div style="margin-bottom: 10px; padding: 10px; background-color: #fafafa; border-radius: 4px;">
              <div style="font-weight: bold; color: #424242;">Policy Stance</div>
              <div style="color: #616161;">${macro.federalReservePolicy.stance}</div>
            </div>` : ''}
            
          ${macro.federalReservePolicy.outlook ? 
            `<div style="margin-bottom: 10px; padding: 10px; background-color: #fafafa; border-radius: 4px;">
              <div style="font-weight: bold; color: #424242;">Outlook</div>
              <div style="color: #616161;">${macro.federalReservePolicy.outlook}</div>
            </div>` : ''}
            
          ${macro.federalReservePolicy.marketImpact ? 
            `<div style="padding: 10px; background-color: #fafafa; border-radius: 4px;">
              <div style="font-weight: bold; color: #424242;">Market Impact</div>
              <div style="color: #616161;">${macro.federalReservePolicy.marketImpact}</div>
            </div>` : ''}
            
          ${macro.federalReservePolicy.source || macro.federalReservePolicy.lastUpdated ? 
            `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
              ${macro.federalReservePolicy.source ? 
                `Source: ${macro.federalReservePolicy.sourceUrl ? 
                  `<a href="${macro.federalReservePolicy.sourceUrl}" style="color: #607d8b; text-decoration: none;">${macro.federalReservePolicy.source}</a>` : 
                  macro.federalReservePolicy.source}` : ''}
              ${macro.federalReservePolicy.source && macro.federalReservePolicy.lastUpdated ? ' | ' : ''}
              ${macro.federalReservePolicy.lastUpdated ? `Last updated: ${macro.federalReservePolicy.lastUpdated}` : ''}
            </div>` : ''}
        </div>`;
    }
    
    // Inflation
    if (macro.inflation) {
      macroHtml += `
        <div style="margin-bottom: 15px; padding: 15px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px; color: #333;">Inflation Metrics</div>
          
          <div style="display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;">
            <!-- CPI Section -->
            <div style="flex: 1 1 48%; min-width: 250px; background-color: white; border-radius: 5px; padding: 15px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
              <div style="text-align: center; font-weight: bold; font-size: 16px; margin-bottom: 15px; color: #333;">Consumer Price Index (CPI)</div>
              <div style="display: flex; justify-content: space-around; gap: 15px;">
                <!-- CPI Headline -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Headline</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for CPI
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (parseFloat(macro.inflation.cpi.headline) > 3 ? '#f44336' : parseFloat(macro.inflation.cpi.headline) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.cpi) > 3 ? '#f44336' : parseFloat(macro.inflation.cpi) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (macro.inflation.cpi.headline || 'N/A') : 
                      (macro.inflation.cpi || 'N/A')
                  }%</div>
                </div>
                
                <!-- CPI Core -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Core</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for Core CPI
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (parseFloat(macro.inflation.cpi.core) > 3 ? '#f44336' : parseFloat(macro.inflation.cpi.core) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.coreCpi) > 3 ? '#f44336' : parseFloat(macro.inflation.coreCpi) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (macro.inflation.cpi.core || 'N/A') : 
                      (macro.inflation.coreCpi || 'N/A')
                  }%</div>
                </div>
              </div>
            </div>
            
            <!-- PCE Section -->
            <div style="flex: 1 1 48%; min-width: 250px; background-color: white; border-radius: 5px; padding: 15px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
              <div style="text-align: center; font-weight: bold; font-size: 16px; margin-bottom: 15px; color: #333;">Personal Consumption Expenditures (PCE)</div>
              <div style="display: flex; justify-content: space-around; gap: 15px;">
                <!-- PCE Headline -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Headline</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for PCE
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (parseFloat(macro.inflation.pce.headline) > 3 ? '#f44336' : parseFloat(macro.inflation.pce.headline) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.pce) > 3 ? '#f44336' : parseFloat(macro.inflation.pce) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (macro.inflation.pce.headline || 'N/A') : 
                      (macro.inflation.pce || 'N/A')
                  }%</div>
                </div>
                
                <!-- PCE Core -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Core</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for Core PCE
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (parseFloat(macro.inflation.pce.core) > 3 ? '#f44336' : parseFloat(macro.inflation.pce.core) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.corePce) > 3 ? '#f44336' : parseFloat(macro.inflation.corePce) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (macro.inflation.pce.core || 'N/A') : 
                      (macro.inflation.corePce || 'N/A')
                  }%</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      }

      if (macro.geopoliticalRisks.regions && Array.isArray(macro.geopoliticalRisks.regions)) {
        macroHtml += "<div style=\"display: flex; flex-direction: column; gap: 10px;\">";
        macro.geopoliticalRisks.regions.forEach(region => {
          macroHtml += "
            <div style=\"padding: 12px; background-color: #ffffff; border-radius: 6px; box-shadow: 0 1px 2px rgba(0,0,0,0.1);\">
              <div style=\"font-weight: bold; margin-bottom: 8px; color: #333;\">" + region.region + "</div>
              " + (region.risks && Array.isArray(region.risks) ? 
                `<div style="display: flex; flex-direction: column; gap: 8px;">
                  ${region.risks.map(risk => {
                    // Remove the word "Impact" from the impactLevel
                    const cleanImpactLevel = risk.impactLevel ? risk.impactLevel.replace(/\b[iI]mpact\b/g, '').trim() : 'N/A';
                    
                    let riskColor = '#757575'; // Default gray
                    if (cleanImpactLevel.toLowerCase().includes('high')) {
                      riskColor = '#f44336'; // Red for high
                    } else if (cleanImpactLevel.toLowerCase().includes('medium')) {
                      riskColor = '#ff9800'; // Orange for medium
                    } else if (cleanImpactLevel.toLowerCase().includes('low')) {
                      riskColor = '#4caf50'; // Green for low
                    }
                    
                    return `<div style="display: flex; align-items: flex-start; padding: 8px; background-color: #f9f9f9; border-radius: 4px;">
                      <div style="flex-grow: 1;">
                        <div style="font-weight: 500; margin-bottom: 3px;">${risk.description}</div>
                        <div style="display: flex; align-items: center;">
                          <span style="font-size: 12px; color: ${riskColor}; font-weight: bold; padding: 2px 6px; background-color: ${riskColor}20; border-radius: 3px; margin-right: 5px;">${cleanImpactLevel}</span>
                          ${risk.timeframe ? `<span style="font-size: 12px; color: #757575;">Timeframe: ${risk.timeframe}</span>` : ''}
                        </div>
                      </div>
                    </div>`;
                  }).join('')}
                </div>` : 
                `<div style="font-style: italic; color: #757575;">No specific risks identified</div>`
              }
            </div>
          `;
        });
        macroHtml += `</div>`;
      }
        }
    if (indicators.upcomingEvents && indicators.upcomingEvents.length > 0) {
      marketIndicatorsHtml += `
        <div style="margin-bottom: 15px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px;">Upcoming Events:</div>
          <div style="display: flex; flex-direction: column; gap: 8px;">
            ${indicators.upcomingEvents.map(event => `
              <div style="display: flex; align-items: center; padding: 8px; background-color: #ffffff; border-radius: 4px; border-left: 3px solid #2196f3;">
                <div style="min-width: 100px; font-weight: bold; color: #2196f3;">${event.date} | </div>
                <div>${event.event}</div>
              </div>
            `).join('')}
          </div>
        </div>
      }
  // Create HTML email template with improved design
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Market Pulse Daily</title>
  <style>
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
    }
    .container {
      max-width: 650px;
      margin: 0 auto;
      padding: 25px;
      background-color: #ffffff;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    .header {
      text-align: center;
      margin-bottom: 25px;
      padding-bottom: 15px;
      border-bottom: 2px solid #f0f0f0;
    }
    .header h1 {
      margin: 0;
      color: #2c3e50;
      font-size: 28px;
    }
    .header p {
      color: #7f8c8d;
      margin: 5px 0 0;
    }
    .decision-box {
      padding: 20px;
      margin: 25px 0;
      border-radius: 8px;
      text-align: center;
      background-color: ${decisionBg};
      border-left: 5px solid ${decisionColor};
      box-shadow: 0 3px 6px rgba(0,0,0,0.1);
    }
    .decision {
      font-size: 28px;
      font-weight: bold;
      color: ${decisionColor};
      margin: 5px 0;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .decision-icon {
      font-size: 32px;
      margin-right: 10px;
    }
    .summary {
      font-size: 16px;
      margin: 15px 0 5px;
      font-style: italic;
      color: #555;
      line-height: 1.5;
    }
    .section {
      margin: 25px 0;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.08);
      border-top: 3px solid #3498db;
    }
    .section-title {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid #eee;
      color: #2c3e50;
    }
    .footer {
      margin-top: 35px;
      text-align: center;
      font-size: 13px;
      color: #95a5a6;
      padding-top: 15px;
      border-top: 1px solid #eee;
    }
    .next-analysis {
      margin-top: 25px;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 8px;
      text-align: center;
      font-size: 15px;
      border-left: 4px solid #3498db;
      color: #34495e;
    }
    .justification {
      line-height: 1.7;
      color: #444;
      white-space: pre-line;
    }
    @media only screen and (max-width: 600px) {
      .container {
        padding: 15px;
        width: 100%;
        box-sizing: border-box;
      }
      .decision {
        font-size: 24px;
      }
      .section {
        padding: 15px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Market Pulse Daily</h1>
      <p>Generated on ${formattedAnalysisDate}</p>
    </div>
    
    <div class="decision-box">
      <p class="decision"><span class="decision-icon">${decisionIcon}</span> ${decision}</p>
      <p class="summary">${summary}</p>
    </div>
    
    <div class="section">
      <h2 class="section-title">Detailed Justification</h2>
      <div class="justification">${justification.replace(/\n/g, '<br>')}</div>
      ${analysis.source || analysis.timestamp ? 
        `<div style="margin-top: 8px; font-size: 11px; color: #9e9e9e; text-align: right;">
          ${analysis.source ? 
            `Source: ${analysis.sourceUrl ? 
              `<a href="${analysis.sourceUrl}" style="color: #607d8b; text-decoration: none;">${analysis.source}</a>` : 
              analysis.source}` : ''}
          ${analysis.source && analysis.timestamp ? ' | ' : ''}
          ${analysis.timestamp ? `Last updated: ${analysis.timestamp}` : ''}
        </div>` : ''}
    </div>
    
    <div class="section">
      <h2 class="section-title">Market Sentiment</h2>
      ${marketSentimentHtml}
    </div>
        }
          <div style="display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;">
            <!-- CPI Section -->
            <div style="flex: 1 1 48%; min-width: 250px; background-color: white; border-radius: 5px; padding: 15px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
              <div style="text-align: center; font-weight: bold; font-size: 16px; margin-bottom: 15px; color: #333;">Consumer Price Index (CPI)</div>
              <div style="display: flex; justify-content: space-around; gap: 15px;">
                <!-- CPI Headline -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Headline</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for CPI
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (parseFloat(macro.inflation.cpi.headline) > 3 ? '#f44336' : parseFloat(macro.inflation.cpi.headline) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.cpi) > 3 ? '#f44336' : parseFloat(macro.inflation.cpi) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (macro.inflation.cpi.headline || 'N/A') : 
                      (macro.inflation.cpi || 'N/A')
                  }%</div>
                </div>
                
                <!-- CPI Core -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Core</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for Core CPI
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (parseFloat(macro.inflation.cpi.core) > 3 ? '#f44336' : parseFloat(macro.inflation.cpi.core) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.coreCpi) > 3 ? '#f44336' : parseFloat(macro.inflation.coreCpi) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.cpi && typeof macro.inflation.cpi === 'object' ? 
                      (macro.inflation.cpi.core || 'N/A') : 
                      (macro.inflation.coreCpi || 'N/A')
                  }%</div>
                </div>
              </div>
            </div>
            
            <!-- PCE Section -->
            <div style="flex: 1 1 48%; min-width: 250px; background-color: white; border-radius: 5px; padding: 15px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
              <div style="text-align: center; font-weight: bold; font-size: 16px; margin-bottom: 15px; color: #333;">Personal Consumption Expenditures (PCE)</div>
              <div style="display: flex; justify-content: space-around; gap: 15px;">
                <!-- PCE Headline -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Headline</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for PCE
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (parseFloat(macro.inflation.pce.headline) > 3 ? '#f44336' : parseFloat(macro.inflation.pce.headline) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.pce) > 3 ? '#f44336' : parseFloat(macro.inflation.pce) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (macro.inflation.pce.headline || 'N/A') : 
                      (macro.inflation.pce || 'N/A')
                  }%</div>
                </div>
                
                <!-- PCE Core -->
                <div style="flex: 1; text-align: center; padding: 10px; background-color: #f5f5f5; border-radius: 5px;">
                  <div style="color: #666; font-size: 14px; margin-bottom: 8px;">Core</div>
                  <div style="font-size: 22px; font-weight: bold; color: ${
                    // Handle both nested and flat formats for Core PCE
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (parseFloat(macro.inflation.pce.core) > 3 ? '#f44336' : parseFloat(macro.inflation.pce.core) > 2 ? '#ff9800' : '#4caf50') : 
                      (parseFloat(macro.inflation.corePce) > 3 ? '#f44336' : parseFloat(macro.inflation.corePce) > 2 ? '#ff9800' : '#4caf50')
                  };">${
                    // Display the appropriate value based on format
                    macro.inflation.pce && typeof macro.inflation.pce === 'object' ? 
                      (macro.inflation.pce.core || 'N/A') : 
                      (macro.inflation.corePce || 'N/A')
                  }%</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      }

      if (macro.geopoliticalRisks.regions && Array.isArray(macro.geopoliticalRisks.regions)) {
        macroHtml += "<div style=\"display: flex; flex-direction: column; gap: 10px;\">";
        macro.geopoliticalRisks.regions.forEach(region => {
          macroHtml += "
            <div style=\"padding: 12px; background-color: #ffffff; border-radius: 6px; box-shadow: 0 1px 2px rgba(0,0,0,0.1);\">
              <div style=\"font-weight: bold; margin-bottom: 8px; color: #333;\">" + region.region + "</div>
              " + (region.risks && Array.isArray(region.risks) ? 
                `<div style="display: flex; flex-direction: column; gap: 8px;">
                  ${region.risks.map(risk => {
                    // Remove the word "Impact" from the impactLevel
                    const cleanImpactLevel = risk.impactLevel ? risk.impactLevel.replace(/\b[iI]mpact\b/g, '').trim() : 'N/A';
                    
                    let riskColor = '#757575'; // Default gray
                    if (cleanImpactLevel.toLowerCase().includes('high')) {
                      riskColor = '#f44336'; // Red for high
                    } else if (cleanImpactLevel.toLowerCase().includes('medium')) {
                      riskColor = '#ff9800'; // Orange for medium
                    } else if (cleanImpactLevel.toLowerCase().includes('low')) {
                      riskColor = '#4caf50'; // Green for low
                    }
                    
                    return `<div style="display: flex; align-items: flex-start; padding: 8px; background-color: #f9f9f9; border-radius: 4px;">
                      <div style="flex-grow: 1;">
                        <div style="font-weight: 500; margin-bottom: 3px;">${risk.description}</div>
                        <div style="display: flex; align-items: center;">
                          <span style="font-size: 12px; color: ${riskColor}; font-weight: bold; padding: 2px 6px; background-color: ${riskColor}20; border-radius: 3px; margin-right: 5px;">${cleanImpactLevel}</span>
                          ${risk.timeframe ? `<span style="font-size: 12px; color: #757575;">Timeframe: ${risk.timeframe}</span>` : ''}
                        </div>
                      </div>
                    </div>`;
                  }).join('')}
                </div>` : 
                `<div style="font-style: italic; color: #757575;">No specific risks identified</div>`
              }
            </div>
          `;
        });
        macroHtml += `</div>`;
      }
        }
    if (indicators.upcomingEvents && indicators.upcomingEvents.length > 0) {
      marketIndicatorsHtml += `
        <div style="margin-bottom: 15px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px;">Upcoming Events:</div>
          <div style="display: flex; flex-direction: column; gap: 8px;">
            ${indicators.upcomingEvents.map(event => `
              <div style="display: flex; align-items: center; padding: 8px; background-color: #ffffff; border-radius: 4px; border-left: 3px solid #2196f3;">
                <div style="min-width: 100px; font-weight: bold; color: #2196f3;">${event.date} | </div>
                <div>${event.event}</div>
              </div>
            `).join('')}
          </div>
        }
  // Build the plain text email
  let plainTextBody = `MARKET PULSE DAILY\n`;
  plainTextBody += `===================\n\n`;
  plainTextBody += `TRADING DECISION: ${decisionIcon} ${decision}\n\n`;
  plainTextBody += `Analysis Date: ${formattedAnalysisDate}\n`;
  plainTextBody += `Next Analysis: ${formattedNextDate}\n\n`;
  
  plainTextBody += `SUMMARY\n`;
  plainTextBody += `-------\n`;
  plainTextBody += `${summary}\n\n`;
  
  // Justification
  plainTextBody += `JUSTIFICATION\n`;
  plainTextBody += `-------------\n`;
  plainTextBody += `${justification}\n\n`;
  
  // Market Sentiment
  plainTextBody += `MARKET SENTIMENT\n`;
  plainTextBody += `-----------------\n`;
        }
    if (indicators.upcomingEvents && indicators.upcomingEvents.length > 0) {
      plainTextBody += `Upcoming Events:\n`;
      indicators.upcomingEvents.forEach(event => {
        plainTextBody += `* ${event.date} | ${event.event}\n`;
      });
      plainTextBody += `\n`;
    }
        }
      if (macro.geopoliticalRisks.regions && macro.geopoliticalRisks.regions.length > 0) {
        plainTextBody += `  Regional Risks:\n`;
        macro.geopoliticalRisks.regions.forEach(region => {
          plainTextBody += `  * ${region.region}:\n`;
          if (region.risks && region.risks.length > 0) {
            region.risks.forEach(risk => {
              // Remove the word "Impact" from the impactLevel
              const cleanImpactLevel = risk.impactLevel ? risk.impactLevel.replace(/\b[iI]mpact\b/g, '').trim() : 'N/A';
              plainTextBody += `    - ${risk.description} (${cleanImpactLevel})\n`;
            });
          }
        });
        plainTextBody += `\n`;
      }
        }
    <div class="section">
      <h2 class="section-title">Key Market Indicators</h2>
      ${marketIndicatorsHtml}
    </div>
    
    <div class="section">
      <h2 class="section-title">Fundamental Metrics</h2>
      ${fundamentalMetricsHtml}
    </div>
    
    <div class="section">
      <h2 class="section-title">Macroeconomic Factors</h2>
      ${macroHtml}
    </div>
        }

```

```
            </div>
          </div>
        </div>
      
      if (macro.geopoliticalRisks.regions && Array.isArray(macro.geopoliticalRisks.regions)) {
