/**
 * Generates a complete data retrieval text for the OpenAI prompt
 * Retrieves all data (market sentiment, key market indicators, fundamental metrics, and macroeconomic factors)
 * and formats it in a text format similar to sampleDataRetrieval.txt
 * @return {String} Formatted data retrieval text
 */
function generateDataRetrievalText() {
  try {
    Logger.log("Generating data retrieval text...");
    
    // Retrieve all data
    const allData = retrieveAllData();
    
    // Initialize formatted text
    let formattedText = "\n\n**Retrieved Data:**\n\n";
    
    try {
      // Add Market Sentiment section
      formattedText += "**Market Sentiment Data:**\n";
      
      if (allData && allData.success) {
        // Format market sentiment data
        if (allData.marketSentiment && allData.marketSentiment.success) {
          const marketSentimentData = allData.marketSentiment;
          
          // Format overall sentiment
          if (marketSentimentData.overall) {
            formattedText += `- Overall Market Sentiment: ${marketSentimentData.overall}\n`;
          }
          
          // Format analyst comments
          if (marketSentimentData.analysts && marketSentimentData.analysts.length > 0) {
            formattedText += "- Analyst Comments:\n";
            
            for (const analyst of marketSentimentData.analysts) {
              formattedText += `  * ${analyst.name}: "${analyst.comment}"\n`;
              
              // Add mentioned stocks if available
              if (analyst.mentionedSymbols && analyst.mentionedSymbols.length > 0) {
                formattedText += `    - Mentioned Stocks: ${analyst.mentionedSymbols.join(", ")}\n`;
              }
              
              // Add source if available
              if (analyst.source) {
                formattedText += `    - Source: ${analyst.source}\n`;
              }
            }
          }
          
          // Add timestamp
          const timestamp = marketSentimentData.timestamp || new Date().toLocaleString();
          formattedText += `- Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        } else {
          formattedText += "- Error: Market sentiment data not available\n";
        }
        
        formattedText += "\n";
      }
    } catch (error) {
      Logger.log(`Error in market sentiment section: ${error}`);
      formattedText += `- Error processing market sentiment data: ${error}\n\n`;
    }
    
    try {
      // Add Key Market Indicators section
      formattedText += "**Key Market Indicators Data:**\n";
      
      if (allData && allData.success) {
        // Format key market indicators data
        if (allData.keyMarketIndicators && allData.keyMarketIndicators.success) {
          const keyMarketIndicatorsData = allData.keyMarketIndicators;
          
          // Format Fear & Greed Index
          if (keyMarketIndicatorsData.fearGreedIndex) {
            const fgIndex = keyMarketIndicatorsData.fearGreedIndex;
            formattedText += "- Fear & Greed Index:\n";
            
            if (fgIndex.value !== undefined) {
              formattedText += `  * Value: ${fgIndex.value}\n`;
            }
            
            if (fgIndex.interpretation) {
              formattedText += `  * Interpretation: ${fgIndex.interpretation}\n`;
            }
            
            if (fgIndex.source) {
              formattedText += `  * Source: ${fgIndex.source}\n`;
            }
            
            // Add timestamp
            const timestamp = fgIndex.timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
            formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
          }
          
          // Format VIX
          if (keyMarketIndicatorsData.vix) {
            const vix = keyMarketIndicatorsData.vix;
            formattedText += "- VIX (Volatility Index):\n";
            
            if (vix.value !== undefined) {
              formattedText += `  * Value: ${vix.value}\n`;
            }
            
            if (vix.trend) {
              formattedText += `  * Trend: ${vix.trend}\n`;
            }
            
            if (vix.analysis) {
              formattedText += `  * Analysis: ${vix.analysis}\n`;
            }
            
            if (vix.source) {
              formattedText += `  * Source: ${vix.source}\n`;
            }
            
            // Add timestamp
            const timestamp = vix.timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
            formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
          }
          
          // Format Treasury Yields
          if (keyMarketIndicatorsData.treasuryYields && keyMarketIndicatorsData.treasuryYields.yields) {
            formattedText += "- Treasury Yields:\n";
            
            // Sort yields by term length (in months)
            const sortedYields = [...keyMarketIndicatorsData.treasuryYields.yields].sort((a, b) => {
              const aMonths = parseTermToMonths(a.term);
              const bMonths = parseTermToMonths(b.term);
              return aMonths - bMonths;
            });
            
            // Add each yield
            for (const yield_ of sortedYields) {
              try {
                const yieldValue = yield_.yield !== undefined ? `${Number(yield_.yield).toFixed(2)}%` : "N/A";
                const changeValue = yield_.change !== undefined ? 
                          `${yield_.change >= 0 ? "+" : ""}${Number(yield_.change).toFixed(2)}%` : 
                          "N/A";
                
                formattedText += `  * ${yield_.term}: ${yieldValue} (${changeValue})\n`;
              } catch (yieldError) {
                Logger.log(`Error formatting yield for ${yield_.term}: ${yieldError}`);
                formattedText += `  * ${yield_.term}: Error formatting yield data\n`;
              }
            }
            
            // Add timestamp
            const timestamp = keyMarketIndicatorsData.treasuryYields.timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
            formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
          }
          
          // Format upcoming economic events
          if (keyMarketIndicatorsData.upcomingEconomicEvents && keyMarketIndicatorsData.upcomingEconomicEvents.length > 0) {
            formattedText += `* Upcoming Economic Events:\n`;
            
            for (const event of keyMarketIndicatorsData.upcomingEconomicEvents) {
              formattedText += `  * ${event.date}: ${event.event}\n`;
            }
          }
        } else {
          formattedText += "- Error: Key market indicators data not available\n";
        }
        
        formattedText += "\n";
      }
    } catch (error) {
      Logger.log(`Error in key market indicators section: ${error}`);
      formattedText += `- Error processing key market indicators data: ${error}\n\n`;
    }
    
    try {
      // Add Fundamental Metrics section
      formattedText += "**Fundamental Metrics Data:**\n";
      
      if (allData && allData.success) {
        // Format fundamental metrics data
        if (allData.fundamentalMetrics && allData.fundamentalMetrics.data && allData.fundamentalMetrics.data.length > 0) {
          Logger.log("DEBUG - Fundamental metrics before check: " + JSON.stringify(allData.fundamentalMetrics).substring(0, 500) + "...");
          
          // Log the structure of the fundamental metrics data
          Logger.log("DEBUG - Formatting fundamental metrics: " + JSON.stringify(allData.fundamentalMetrics).substring(0, 500) + "...");
          Logger.log(`DEBUG - Fundamental metrics structure: success=${allData.fundamentalMetrics.success}, data=${allData.fundamentalMetrics.data ? 'present' : 'missing'}, data length=${allData.fundamentalMetrics.data ? allData.fundamentalMetrics.data.length : 0}`);
          
          // Log the keys of the fundamental metrics data
          Logger.log(`DEBUG - Fundamental metrics data keys: ${Object.keys(allData.fundamentalMetrics).join(',')}`);
          
          const stocks = allData.fundamentalMetrics.data;
          
          // Define major indices for sorting
          const majorIndices = ["SPY", "QQQ", "IWM", "DIA"];
          
          // Sort stocks: first major indices, then alphabetically
          const sortedStocks = [...stocks].sort((a, b) => {
            const aSymbol = a.symbol || "";
            const bSymbol = b.symbol || "";
            
            // Check if either stock is a major index
            const aIsMajor = majorIndices.includes(aSymbol);
            const bIsMajor = majorIndices.includes(bSymbol);
            
            // Major indices come first
            if (aIsMajor && !bIsMajor) return -1;
            if (!aIsMajor && bIsMajor) return 1;
            if (aIsMajor && bIsMajor) {
              return majorIndices.indexOf(aSymbol) - majorIndices.indexOf(bSymbol);
            }
            
            // Then sort alphabetically
            return aSymbol.localeCompare(bSymbol);
          });
          
          // Group stocks into categories
          const indices = sortedStocks.filter(stock => majorIndices.includes(stock.symbol));
          const magSeven = sortedStocks.filter(stock => ["AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA"].includes(stock.symbol));
          const otherStocks = sortedStocks.filter(stock => 
            !majorIndices.includes(stock.symbol) && 
            !["AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA"].includes(stock.symbol)
          );
          
          // Format major indices
          if (indices.length > 0) {
            formattedText += "- Major Indices:\n";
            for (const stock of indices) {
              try {
                formattedText = formatStockMetrics(stock, formattedText);
              } catch (stockError) {
                Logger.log(`Error formatting stock metrics for ${stock.symbol}: ${stockError}`);
                formattedText += `  * ${stock.symbol}: Error formatting stock data\n`;
              }
            }
          }
          
          // Format Magnificent Seven
          if (magSeven.length > 0) {
            formattedText += "- Magnificent Seven:\n";
            for (const stock of magSeven) {
              try {
                formattedText = formatStockMetrics(stock, formattedText);
              } catch (stockError) {
                Logger.log(`Error formatting stock metrics for ${stock.symbol}: ${stockError}`);
                formattedText += `  * ${stock.symbol}: Error formatting stock data\n`;
              }
            }
          }
          
          // Format other stocks
          if (otherStocks.length > 0) {
            formattedText += "- Other Stocks:\n";
            for (const stock of otherStocks) {
              try {
                formattedText = formatStockMetrics(stock, formattedText);
              } catch (stockError) {
                Logger.log(`Error formatting stock metrics for ${stock.symbol}: ${stockError}`);
                formattedText += `  * ${stock.symbol}: Error formatting stock data\n`;
              }
            }
          }
          
          // Add timestamp
          const timestamp = allData.fundamentalMetrics.timestamp || new Date().toLocaleString();
          formattedText += `- Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        } else {
          formattedText += "- Error: Fundamental metrics data not available\n";
        }
        
        formattedText += "\n";
      }
    } catch (error) {
      Logger.log(`Error in fundamental metrics section: ${error}`);
      formattedText += `- Error processing fundamental metrics data: ${error}\n\n`;
    }
    
    try {
      // Format macroeconomic factors data
      formattedText += "**Macroeconomic Factors Data:**\n";
      
      if (allData.macroeconomicFactors && allData.macroeconomicFactors.success) {
        const macroData = allData.macroeconomicFactors;
        
        // Format treasury yields if available
        if (macroData.treasuryYields && macroData.treasuryYields.yields) {
          formattedText += "- Treasury Yields:\n";
          
          // Check if we have the yields array (new structure) or direct properties (old structure)
          if (macroData.treasuryYields.yields && Array.isArray(macroData.treasuryYields.yields)) {
            // New structure: array of yield objects
            macroData.treasuryYields.yields.forEach(yieldObj => {
              try {
                const yieldValue = yieldObj.yield !== undefined ? `${Number(yieldObj.yield).toFixed(2)}%` : "N/A";
                formattedText += `  * ${yieldObj.term}: ${yieldValue}\n`;
              } catch (yieldError) {
                Logger.log(`Error formatting yield for ${yieldObj.term}: ${yieldError}`);
                formattedText += `  * ${yieldObj.term}: Error formatting yield data\n`;
              }
            });
          } else {
            // Old structure: direct properties
            const yieldTerms = ["threeMonth", "oneYear", "twoYear", "fiveYear", "tenYear", "thirtyYear"];
            
            yieldTerms.forEach(term => {
              try {
                if (macroData.treasuryYields[term] !== undefined) {
                  const displayTerm = term.replace(/([A-Z])/g, ' $1').toLowerCase();
                  const yieldValue = `${Number(macroData.treasuryYields[term]).toFixed(2)}%`;
                  formattedText += `  * ${displayTerm}: ${yieldValue}\n`;
                }
              } catch (yieldError) {
                Logger.log(`Error formatting yield for ${term}: ${yieldError}`);
                formattedText += `  * ${term}: Error formatting yield data\n`;
              }
            });
          }
          
          // Add yield curve status if available
          if (macroData.treasuryYields.yieldCurve) {
            formattedText += `  * Yield Curve: ${macroData.treasuryYields.yieldCurve}\n`;
          }
          
          // Add timestamp
          const timestamp = macroData.treasuryYields.timestamp || macroData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
        
        // Format Fed policy if available
        if (macroData.fedPolicy) {
          formattedText += "- Federal Reserve Policy:\n";
          
          if (macroData.fedPolicy.rate !== undefined) {
            try {
              formattedText += `  * Federal Funds Rate: ${Number(macroData.fedPolicy.rate).toFixed(2)}%\n`;
            } catch (rateError) {
              Logger.log(`Error formatting Fed rate: ${rateError}`);
              formattedText += `  * Federal Funds Rate: Error formatting rate data\n`;
            }
          }
          
          if (macroData.fedPolicy.guidance) {
            formattedText += `  * Forward Guidance: ${macroData.fedPolicy.guidance}\n`;
          }
          
          // Add timestamp
          const timestamp = macroData.fedPolicy.timestamp || macroData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
        
        // Format inflation data if available
        if (macroData.inflation) {
          formattedText += "- Inflation:\n";
          
          if (macroData.inflation.currentRate !== undefined) {
            try {
              formattedText += `  * Current Rate: ${Number(macroData.inflation.currentRate).toFixed(2)}%\n`;
            } catch (inflationError) {
              Logger.log(`Error formatting inflation rate: ${inflationError}`);
              formattedText += `  * Current Rate: Error formatting inflation data\n`;
            }
          }
          
          // Format CPI data if available
          if (macroData.inflation.cpi) {
            formattedText += "  * CPI (Consumer Price Index):\n";
            
            if (macroData.inflation.cpi.headline !== undefined) {
              try {
                formattedText += `    - Headline: ${Number(macroData.inflation.cpi.headline).toFixed(2)}%\n`;
              } catch (cpiError) {
                Logger.log(`Error formatting CPI headline: ${cpiError}`);
                formattedText += `    - Headline: Error formatting CPI data\n`;
              }
            }
            
            if (macroData.inflation.cpi.core !== undefined) {
              try {
                formattedText += `    - Core: ${Number(macroData.inflation.cpi.core).toFixed(2)}%\n`;
              } catch (cpiError) {
                Logger.log(`Error formatting CPI core: ${cpiError}`);
                formattedText += `    - Core: Error formatting CPI data\n`;
              }
            }
          }
          
          // Format PCE data if available
          if (macroData.inflation.pce) {
            formattedText += "  * PCE (Personal Consumption Expenditures):\n";
            
            if (macroData.inflation.pce.headline !== undefined) {
              try {
                formattedText += `    - Headline: ${Number(macroData.inflation.pce.headline).toFixed(2)}%\n`;
              } catch (pceError) {
                Logger.log(`Error formatting PCE headline: ${pceError}`);
                formattedText += `    - Headline: Error formatting PCE data\n`;
              }
            }
            
            if (macroData.inflation.pce.core !== undefined) {
              try {
                formattedText += `    - Core: ${Number(macroData.inflation.pce.core).toFixed(2)}%\n`;
              } catch (pceError) {
                Logger.log(`Error formatting PCE core: ${pceError}`);
                formattedText += `    - Core: Error formatting PCE data\n`;
              }
            }
          }
          
          if (macroData.inflation.trend) {
            formattedText += `  * Trend: ${macroData.inflation.trend}\n`;
          }
          
          // Add timestamp
          const timestamp = macroData.inflation.timestamp || macroData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
        
        // Format geopolitical risks if available
        if (macroData.geopoliticalRisks) {
          formattedText += "- Geopolitical Risks:\n";
          
          if (macroData.geopoliticalRisks.global) {
            formattedText += `  * Global: ${macroData.geopoliticalRisks.global}\n`;
          }
          
          // Format regional risks if available
          if (macroData.geopoliticalRisks.regions && macroData.geopoliticalRisks.regions.length > 0) {
            formattedText += "  * Regional Risks:\n";
            
            for (const region of macroData.geopoliticalRisks.regions) {
              formattedText += `    - ${region.name}:\n`;
              
              if (region.risks && region.risks.length > 0) {
                for (const risk of region.risks) {
                  formattedText += `      * ${risk.description} (Impact: ${risk.impact})\n`;
                }
              }
            }
          }
          
          // Add timestamp
          const timestamp = macroData.geopoliticalRisks.timestamp || macroData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
      } else {
        formattedText += "- Error: Macroeconomic factors data not available\n";
      }
    } catch (error) {
      Logger.log(`Error in macroeconomic factors section: ${error}`);
      formattedText += `- Error processing macroeconomic factors data: ${error}\n\n`;
    }
    
    return formattedText;
  } catch (error) {
    Logger.log(`Error in generateDataRetrievalText: ${error}`);
    return `**Error generating data retrieval text:** ${error}`;
  }
}

/**
 * Helper function to format stock metrics
 * @param {Object} stock - Stock data
 * @param {String} formattedText - Formatted text to append to
 * @return {String} - Updated formatted text
 */
function formatStockMetrics(stock, formattedText) {
  const symbol = stock.symbol || "Unknown";
  const name = stock.name || "Unknown";
  
  formattedText += `  * ${symbol} (${name}):\n`;
  
  // Format price and price change if available
  if (stock.price !== undefined && stock.price !== null) {
    const priceStr = formatPriceData(stock);
    formattedText += `    - Price: ${priceStr}\n`;
  }

  // Format volume and market cap if available
  if (stock.volume !== undefined && stock.volume !== null) {
    const volumeStr = formatVolume(stock.volume);
    formattedText += `    - Volume: ${volumeStr}\n`;
  }

  if (stock.marketCap !== undefined && stock.marketCap !== null) {
    const marketCapStr = formatMarketCap(stock.marketCap);
    formattedText += `    - Market Cap: ${marketCapStr}\n`;
  }

  // Format industry and sector if available
  if (stock.industry !== undefined && stock.industry !== null) {
    formattedText += `    - Industry: ${stock.industry}\n`;
  }

  if (stock.sector !== undefined && stock.sector !== null) {
    formattedText += `    - Sector: ${stock.sector}\n`;
  }
  
  // Format other metrics
  const metrics = [
    { name: "PEG Ratio", value: stock.pegRatio },
    { name: "Forward P/E", value: stock.forwardPE },
    { name: "Price/Book", value: stock.priceToBook },
    { name: "Price/Sales", value: stock.priceToSales },
    { name: "Debt/Equity", value: stock.debtToEquity },
    { name: "Return on Equity", value: stock.returnOnEquity, suffix: "%" },
    { name: "Return on Assets", value: stock.returnOnAssets, suffix: "%" },
    { name: "Profit Margin", value: stock.profitMargin, suffix: "%" },
    { name: "Dividend Yield", value: stock.dividendYield, suffix: "%" },
    { name: "Beta", value: stock.beta }
  ];
  
  metrics.forEach(metric => {
    if (metric.value !== undefined && metric.value !== null) {
      const formattedValue = formatValue(metric.value);
      const suffix = metric.suffix || "";
      formattedText += `    - ${metric.name}: ${formattedValue}${suffix}\n`;
    }
  });

  return formattedText;
}

/**
 * Helper function to format values for display
 * @param {number} value - The value to format
 * @param {boolean} fixedDecimals - Whether to use a fixed number of decimals
 * @param {number} decimals - Number of decimals to use if fixedDecimals is true
 * @return {string} The formatted value
 */
function formatValue(value, fixedDecimals = false, decimals = 2) {
  if (value === undefined || value === null || isNaN(value) || typeof value !== 'number') {
    // Try to convert to number if it's a string
    if (typeof value === 'string') {
      const parsedValue = parseFloat(value);
      if (!isNaN(parsedValue)) {
        value = parsedValue;
      } else {
        return "N/A";
      }
    } else {
      return "N/A";
    }
  }
  
  if (fixedDecimals) {
    return value.toFixed(decimals);
  }
  
  return value.toString();
}

/**
 * Helper function to format market cap values
 * @param {number} marketCap - The market cap value to format
 * @return {string} The formatted market cap value
 */
function formatMarketCap(marketCap) {
  if (!marketCap || isNaN(marketCap)) return "N/A";
  if (marketCap >= 1e12) return "$" + (marketCap / 1e12).toFixed(2) + "T";
  if (marketCap >= 1e9) return "$" + (marketCap / 1e9).toFixed(2) + "B";
  if (marketCap >= 1e6) return "$" + (marketCap / 1e6).toFixed(2) + "M";
  return "$" + marketCap.toFixed(2);
}

/**
 * Helper function to format volume values
 * @param {number} volume - The volume value to format
 * @return {string} The formatted volume value
 */
function formatVolume(volume) {
  if (!volume || isNaN(volume)) return "N/A";
  if (volume >= 1e9) return (volume / 1e9).toFixed(2) + "B";
  if (volume >= 1e6) return (volume / 1e6).toFixed(2) + "M";
  if (volume >= 1e3) return (volume / 1e3).toFixed(2) + "K";
  return volume.toString();
}

/**
 * Helper function to format price data
 * @param {Object} stock - The stock object containing price data
 * @return {string} The formatted price string
 */
function formatPriceData(stock) {
  if (!stock.price && stock.price !== 0) return "N/A";
  
  let priceStr = "$" + Number(stock.price).toFixed(2);
  if (stock.priceChange !== undefined && !isNaN(stock.priceChange)) {
    priceStr += ` (${stock.priceChange >= 0 ? '+' : ''}${Number(stock.priceChange).toFixed(2)}`;
    if (stock.percentChange !== undefined && !isNaN(stock.percentChange)) {
      priceStr += `, ${stock.percentChange >= 0 ? '+' : ''}${Number(stock.percentChange).toFixed(2)}%`;
    }
    priceStr += ")";
  }
  return priceStr;
}

/**
 * Retrieves all data needed for trading analysis
 * This includes market sentiment, key market indicators, fundamental metrics, and macroeconomic factors
 * @return {Object} All data needed for trading analysis
 */
function retrieveAllData() {
  try {
    Logger.log("Retrieving all data for trading analysis...");
    
    // Get the current date
    const currentDate = new Date();
    
    // Step 1: Retrieve market sentiment data
    Logger.log("Step 1: Retrieving market sentiment data...");
    const marketSentiment = retrieveMarketSentiment();
    
    // Extract any stock symbols mentioned in the market sentiment data
    let mentionedStocks = [];
    if (marketSentiment && marketSentiment.success && marketSentiment.data && marketSentiment.data.analysts) {
      // Extract stock symbols from analyst comments
      marketSentiment.data.analysts.forEach(analyst => {
        if (analyst.mentionedStocks && Array.isArray(analyst.mentionedStocks)) {
          mentionedStocks = mentionedStocks.concat(analyst.mentionedStocks);
        } else if (analyst.mentionedSymbols && Array.isArray(analyst.mentionedSymbols)) {
          // For backward compatibility
          mentionedStocks = mentionedStocks.concat(analyst.mentionedSymbols);
        }
      });
      
      // Remove duplicates
      mentionedStocks = [...new Set(mentionedStocks)];
      Logger.log(`Found ${mentionedStocks.length} mentioned stocks: ${mentionedStocks.join(', ')}`);
    }
    
    // Step 2: Retrieve key market indicators
    Logger.log("Step 2: Retrieving key market indicators...");
    const keyMarketIndicators = retrieveKeyMarketIndicators();
    
    // Step 3: Retrieve fundamental metrics for mentioned stocks and default symbols
    // Always include the Magnificent Seven and major indices
    const defaultSymbols = ["SPY", "QQQ", "IWM", "DIA", "AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA"];
    const allSymbols = [...new Set([...mentionedStocks, ...defaultSymbols])];
    
    Logger.log(`Step 3: Retrieving fundamental metrics for ${allSymbols.length} symbols...`);
    const fundamentalMetrics = retrieveFundamentalMetrics(allSymbols, mentionedStocks);
    
    // Ensure the fundamental metrics data is properly structured
    const processedMetrics = {
      success: fundamentalMetrics.success,
      message: fundamentalMetrics.message,
      data: fundamentalMetrics.data || [],
      timestamp: new Date(),
      fromCache: fundamentalMetrics.fromCache,
      executionTime: fundamentalMetrics.executionTime || 0,
      cachePerformance: {
        hits: fundamentalMetrics.cacheHits || 0,
        misses: fundamentalMetrics.cacheMisses || 0,
        hitRate: fundamentalMetrics.cacheHits > 0 ? ((fundamentalMetrics.cacheHits / (fundamentalMetrics.cacheHits + fundamentalMetrics.cacheMisses)) * 100).toFixed(1) + '%' : '0%'
      }
    };
    
    // Step 4: Retrieve macroeconomic factors
    Logger.log("Step 4: Retrieving macroeconomic factors...");
    const macroeconomicFactors = retrieveMacroeconomicFactors();
    
    // Compile all data
    const allData = {
      success: true,
      marketSentiment: marketSentiment,
      keyMarketIndicators: keyMarketIndicators,
      fundamentalMetrics: processedMetrics,
      macroeconomicFactors: macroeconomicFactors,
      timestamp: currentDate
    };
    
    Logger.log("All data retrieved successfully.");
    return allData;
  } catch (error) {
    Logger.log(`Error retrieving all data: ${error}`);
    return {
      success: false,
      error: true,
      message: `Failed to retrieve all data: ${error}`,
      timestamp: new Date()
    };
  }
}
