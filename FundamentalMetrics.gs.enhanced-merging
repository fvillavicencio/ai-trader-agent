/**
 * Fetches fundamental metrics data for a specific symbol
 * @param {String} symbol - The stock/ETF symbol
 * @return {Object} Fundamental metrics data
 */
function fetchFundamentalMetricsData(symbol) {
  try {
    Logger.log(`Fetching fundamental metrics for ${symbol} using cascading approach...`);
    
    // Check cache first (30-minute cache for fundamental metrics)
    const scriptCache = CacheService.getScriptCache();
    const cacheKey = `FUNDAMENTAL_METRICS_${symbol}`;
    
    // Get cached data
    const cachedData = scriptCache.get(cacheKey);
    if (cachedData) {
      try {
        const parsedData = JSON.parse(cachedData);
        const cacheTime = new Date(parsedData.lastUpdated);
        const currentTime = new Date();
        const cacheAgeMinutes = (currentTime - cacheTime) / (1000 * 60);
        
        if (cacheAgeMinutes < 30) {
          Logger.log(`Using cached fundamental metrics for ${symbol} (less than 30 minutes old)`);
          return { ...parsedData, fromCache: true };
        } else {
          Logger.log(`Cached fundamental metrics for ${symbol} is more than 30 minutes old`);
        }
      } catch (parseError) {
        Logger.log(`Error parsing cached data for ${symbol}: ${parseError}`);
        scriptCache.remove(cacheKey);
      }
    }
    
    // Track execution time
    const startTime = new Date().getTime();
    
    // Initialize metrics object
    let metrics = {
      symbol: symbol,
      price: null,
      priceChange: null,
      changesPercentage: null,
      volume: null,
      marketCap: null,
      industry: null,
      sector: null,
      company: null,
      pegRatio: null,
      forwardPE: null,
      priceToBook: null,
      priceToSales: null,
      debtToEquity: null,
      returnOnEquity: null,
      returnOnAssets: null,
      profitMargin: null,
      dividendYield: null,
      beta: null,
      expenseRatio: null,
      dataSource: [],
      fromCache: false,
      afterHoursPrice: null,
      afterHoursChange: null,
      afterHoursChangePercent: null
    };

    let sourcesUsed = [];
    
    // Try all data sources and combine their data
    const dataSources = [
      { name: "Google Finance", func: fetchGoogleFinanceData, priority: true },
      { name: "Yahoo Finance API", func: fetchYahooFinanceData },
      { name: "FMP API", func: fetchFMPData },
      { name: "Tradier API", func: fetchTradierData }
    ];

    // Try each data source and combine the results
    for (const source of dataSources) {
      try {
        Logger.log(`Attempting to fetch data from ${source.name} for ${symbol}...`);
        const data = source.func(symbol);
        
        if (data && Object.keys(data).length > 0) {
          // Merge data from this source into our metrics object
          // Only overwrite null values with non-null values
          for (const [key, value] of Object.entries(data)) {
            if (value !== null && value !== undefined && metrics.hasOwnProperty(key)) {
              // Prioritize Google Finance for price data
              if (source.priority && (key === 'price' || key === 'priceChange' || key === 'changesPercentage')) {
                metrics[key] = value;
              } else if (!source.priority && metrics[key] === null) {
                metrics[key] = value;
              }
            }
          }
          
          // Add this source to the list of sources used
          sourcesUsed.push(source.name);
          metrics.dataSource = sourcesUsed;
        }
      } catch (error) {
        Logger.log(`Error fetching data from ${source.name} for ${symbol}: ${error}`);
      }
    }
    
    // Count valid metrics
    let validMetricsCount = 0;
    for (const [key, value] of Object.entries(metrics)) {
      if (key !== 'symbol' && key !== 'dataSource' && key !== 'fromCache' && 
          value !== null && 
          value !== undefined && 
          value !== 'N/A' && 
          value !== '#N/A') {
        validMetricsCount++;
      }
    }
    
    Logger.log(`Found ${validMetricsCount} valid metrics for ${symbol}: ${JSON.stringify({
      price: metrics.price,
      change: metrics.priceChange,
      changePct: metrics.changesPercentage,
      pegRatio: metrics.pegRatio || "#N/A",
      forwardPE: metrics.forwardPE || "#N/A",
      priceToBook: metrics.priceToBook || "#N/A",
      priceToSales: metrics.priceToSales || "#N/A",
      debtToEquity: metrics.debtToEquity || "#N/A",
      returnOnEquity: metrics.returnOnEquity || "#N/A",
      beta: metrics.beta
    })}`);
    
    // Check if we have enough valid metrics
    if (validMetricsCount < 1) {
      throw new Error(`Insufficient metrics found for ${symbol}`);
    }
    
    // Add timestamp
    metrics.lastUpdated = new Date().toISOString();
    
    // Cache the metrics data (30-minute cache)
    try {
      scriptCache.put(cacheKey, JSON.stringify(metrics), 60 * 30); // 30 minutes
      Logger.log(`Cached fundamental metrics for ${symbol}`);
    } catch (cacheError) {
      Logger.log(`Error caching fundamental metrics for ${symbol}: ${cacheError}`);
    }
    
    // Calculate execution time
    const executionTime = (new Date().getTime() - startTime) / 1000;
    Logger.log(`Retrieved fundamental metrics for ${symbol} in ${executionTime} seconds`);
    Logger.log(`Sources used: ${metrics.dataSource}`);

    return metrics;
  } catch (error) {
    Logger.log(`Error in fetchFundamentalMetricsData: ${error}`);
    return {
      symbol: symbol,
      price: null,
      dataSource: [],
      error: error.toString()
    };
  }
}

/**
 * Fetches data from FMP API for a specific symbol
 * @param {String} symbol - The stock/ETF symbol
 * @return {Object} FMP API data
 */
function fetchFMPData(symbol) {
  try {
    const FMP_API_KEY = PropertiesService.getScriptProperties().getProperty('FMP_API_KEY');
    if (!FMP_API_KEY) {
      throw new Error('FMP API key not found');
    }

    const url = `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=${FMP_API_KEY}`;
    const response = UrlFetchApp.fetch(url);
    const data = JSON.parse(response.getContentText());
    
    if (data && data.length > 0) {
      const quote = data[0];
      return {
        price: quote.price,
        priceChange: quote.change,
        changesPercentage: quote.changesPercentage,
        volume: quote.volume,
        marketCap: quote.marketCap,
        company: quote.name,
        industry: quote.industry,
        sector: quote.sector
      };
    }
    
    return null;
  } catch (error) {
    Logger.log(`Error fetching FMP data for ${symbol}: ${error}`);
    return null;
  }
}

/**
 * Fetches data from Tradier API for a specific symbol
 * @param {String} symbol - The stock/ETF symbol
 * @return {Object} Fundamental metrics data from Tradier
 */
function fetchTradierData(symbol) {
  try {
    Logger.log(`Fetching Tradier data for ${symbol}`);
    
    // Initialize metrics with null values
    const metrics = {
      pegRatio: null,
      forwardPE: null,
      priceToBook: null,
      priceToSales: null,
      debtToEquity: null,
      returnOnEquity: null,
      returnOnAssets: null,
      profitMargin: null,
      dividendYield: null,
      beta: null,
      expenseRatio: null,
      company: null,
      industry: null,
      sector: null,
      price: null,
      marketCap: null,
      volume: null
    };
    
    // Get the API key from script properties
    const scriptProperties = PropertiesService.getScriptProperties();
    const tradierApiKey = scriptProperties.getProperty('TRADIER_API_KEY');
    
    if (!tradierApiKey) {
      Logger.log('Tradier API key not found. Please set the TRADIER_API_KEY property.');
      return metrics;
    }
    
    // Set up the API request options
    const options = {
      'method': 'GET',
      'headers': {
        'Authorization': `Bearer ${tradierApiKey}`,
        'Accept': 'application/json'
      },
      'muteHttpExceptions': true
    };
    
    // Helper function to make API requests with retry logic
    function makeApiRequest(url, maxRetries = 3) {
      let retries = 0;
      let response;
      
      while (retries < maxRetries) {
        try {
          response = UrlFetchApp.fetch(url, options);
          
          // If successful, return the response
          if (response.getResponseCode() === 200) {
            return JSON.parse(response.getContentText());
          }
          
          // If rate limited, wait and retry
          if (response.getResponseCode() === 429) {
            Utilities.sleep(1000 * (retries + 1));
            retries++;
            continue;
          }
          
          // Other errors, log and return null
          Logger.log(`Error fetching data from Tradier API: ${response.getResponseCode()} - ${response.getContentText()}`);
          return null;
        } catch (error) {
          Logger.log(`Error in Tradier API request: ${error}`);
          retries++;
          Utilities.sleep(1000 * retries);
        }
      }
      
      Logger.log(`Failed to fetch data from Tradier API after ${maxRetries} retries`);
      return null;
    }
    
    // Fetch company profile data
    const profileUrl = `https://api.tradier.com/v1/markets/fundamentals/company?symbols=${symbol}`;
    const profileData = makeApiRequest(profileUrl);
    
    // Fetch financial ratios data
    const ratiosUrl = `https://api.tradier.com/v1/markets/fundamentals/ratios?symbols=${symbol}`;
    const ratiosData = makeApiRequest(ratiosUrl);
    
    // Fetch price data
    const quoteUrl = `https://api.tradier.com/v1/markets/quotes?symbols=${symbol}`;
    const quoteData = makeApiRequest(quoteUrl);
    
    // Process company profile data
    if (profileData && profileData.securities && profileData.securities.security) {
      const profile = profileData.securities.security;
      
      metrics.company = profile.description || null;
      metrics.industry = profile.industry || null;
      metrics.sector = profile.sector || null;
    }
    
    // Process financial ratios data
    if (ratiosData && ratiosData.securities && ratiosData.securities.security) {
      const ratios = ratiosData.securities.security;
      
      metrics.pegRatio = ratios.peg_ratio || null;
      metrics.forwardPE = ratios.forward_pe || null;
      metrics.priceToBook = ratios.price_to_book || null;
      metrics.priceToSales = ratios.price_to_sales || null;
      metrics.debtToEquity = ratios.debt_to_equity || null;
      metrics.returnOnEquity = ratios.return_on_equity || null;
      metrics.returnOnAssets = ratios.return_on_assets || null;
      metrics.profitMargin = ratios.profit_margin || null;
      metrics.beta = ratios.beta || null;
    }
    
    // Process quote data
    if (quoteData && quoteData.quotes && quoteData.quotes.quote) {
      const quote = quoteData.quotes.quote;
      
      metrics.price = quote.last || null;
      metrics.priceChange = quote.change || null;
      metrics.changesPercentage = quote.change_percentage || null;
      metrics.volume = quote.volume || null;
      metrics.marketCap = quote.market_cap || null;
      metrics.dividendYield = quote.dividend_yield || null;
    }
    
    return metrics;
  } catch (error) {
    Logger.log(`Error in fetchTradierData for ${symbol}: ${error}`);
    
    // Return null values for all metrics
    return {
      pegRatio: null,
      forwardPE: null,
      priceToBook: null,
      priceToSales: null,
      debtToEquity: null,
      returnOnEquity: null,
      returnOnAssets: null,
      profitMargin: null,
      dividendYield: null,
      beta: null,
      expenseRatio: null,
      company: null,
      industry: null,
      sector: null,
      price: null,
      marketCap: null,
      volume: null
    };
  }
}

/**
 * Tests the enhanced fundamental metrics data retrieval with combined data sources
 */
function testEnhancedFundamentalMetrics() {
  try {
    Logger.log("=== TESTING ENHANCED FUNDAMENTAL METRICS RETRIEVAL ===");
    
    // Test with a variety of symbols (stocks and ETFs)
    const testSymbols = [
      "SPY",  // Major index ETF
      "AAPL", // Magnificent Seven
      "XOM"   // Other stock
    ];
    
    // Clear cache for test symbols
    const scriptCache = CacheService.getScriptCache();
    testSymbols.forEach(symbol => {
      scriptCache.remove(`FUNDAMENTAL_METRICS_${symbol}`);
    });
    
    const results = {};
    
    for (const symbol of testSymbols) {
      Logger.log(`\n--- Testing ${symbol} ---`);
      
      try {
        const startTime = new Date().getTime();
        
        // Fetch metrics data
        const metrics = fetchFundamentalMetricsData(symbol);
        
        // Calculate execution time
        const executionTime = (new Date().getTime() - startTime) / 1000;
        
        // Log results
        Logger.log(`Retrieved metrics for ${symbol} in ${executionTime} seconds`);
        Logger.log(`Price: ${metrics.price}`);
        Logger.log(`Market Cap: ${metrics.marketCap}`);
        Logger.log(`Volume: ${metrics.volume}`);
        Logger.log(`Beta: ${metrics.beta}`);
        Logger.log(`PEG Ratio: ${metrics.pegRatio}`);
        Logger.log(`Forward P/E: ${metrics.forwardPE}`);
        Logger.log(`Price/Book: ${metrics.priceToBook}`);
        Logger.log(`Price/Sales: ${metrics.priceToSales}`);
        Logger.log(`Debt/Equity: ${metrics.debtToEquity}`);
        Logger.log(`ROE: ${metrics.returnOnEquity}`);
        Logger.log(`Sector: ${metrics.sector}`);
        Logger.log(`Industry: ${metrics.industry}`);
        Logger.log(`Data Sources: ${metrics.dataSource.join(', ')}`);
        
        // Store results
        results[symbol] = {
          success: true,
          executionTime: executionTime,
          metrics: metrics
        };
      } catch (error) {
        Logger.log(`Error testing ${symbol}: ${error}`);
        results[symbol] = {
          success: false,
          error: error.toString()
        };
      }
    }
    
    // Log summary of results
    Logger.log("\n=== TEST SUMMARY ===");
    for (const symbol in results) {
      if (results[symbol].success) {
        Logger.log(`${symbol}: Success in ${results[symbol].executionTime} seconds`);
        Logger.log(`Data Sources: ${results[symbol].metrics.dataSource.join(', ')}`);
      } else {
        Logger.log(`${symbol}: Failed - ${results[symbol].error}`);
      }
    }
    
    return results;
  } catch (error) {
    Logger.log(`Error in testEnhancedFundamentalMetrics: ${error}`);
    return { success: false, error: error.toString() };
  }
}