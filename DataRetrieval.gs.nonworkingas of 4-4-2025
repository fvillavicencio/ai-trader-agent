/**
 * Generates a complete data retrieval text for the OpenAI prompt
 * Retrieves all data (market sentiment, key market indicators, fundamental metrics, and macroeconomic factors)
 * and formats it in a text format similar to sampleDataRetrieval.txt
 * @return {String} Formatted data retrieval text
 */
function generateDataRetrievalText() {
  try {
    Logger.log("Generating data retrieval text...");
    
    // Retrieve all data
    const allData = retrieveAllData();
    
    // Initialize formatted text
    let formattedText = "\n\n**Retrieved Data:**\n\n";
    
    // Add Market Sentiment section
    formattedText += "**Market Sentiment Data:**\n";
    
    if (allData && allData.success) {
      // Format market sentiment data
      formattedText += "MARKET SENTIMENT DATA:\n";
      
      if (allData.marketSentiment && allData.marketSentiment.success) {
        const marketSentimentData = allData.marketSentiment;
        formattedText += `- Last Updated: ${new Date(marketSentimentData.timestamp).toLocaleString()}\n`;
        
        // Extract the actual data
        let sentimentData = marketSentimentData.data;
        
        // Navigate through the nested data structure if needed
        if (sentimentData.data && typeof sentimentData.data === 'object') {
          sentimentData = sentimentData.data;
        }
        
        // Add analyst commentary if available
        if (sentimentData.analysts && Array.isArray(sentimentData.analysts) && sentimentData.analysts.length > 0) {
          formattedText += "- Analyst Commentary:\n";
          
          sentimentData.analysts.forEach(analyst => {
            const analystName = analyst.name || "Unknown Analyst";
            const commentary = analyst.commentary || "No commentary provided";
            const source = analyst.source || "N/A";
            const sourceUrl = analyst.url || "N/A";
            
            formattedText += `  * ${analystName}: "${commentary}" (Source: ${source}, ${sourceUrl})\n`;
            
            // Add mentioned stocks if available
            if (analyst.mentionedStocks && Array.isArray(analyst.mentionedStocks) && analyst.mentionedStocks.length > 0) {
              formattedText += `    Mentioned stocks: ${analyst.mentionedStocks.join(', ')}\n`;
            } else if (analyst.mentionedSymbols && Array.isArray(analyst.mentionedSymbols) && analyst.mentionedSymbols.length > 0) {
              // For backward compatibility
              formattedText += `    Mentioned stocks: ${analyst.mentionedSymbols.join(', ')}\n`;
            }
          });
        }
        
        // Add overall market sentiment if available
        if (sentimentData.overall) {
          formattedText += `- Overall Market Sentiment: ${sentimentData.overall}\n`;
        }
      } else {
        formattedText += "- Error retrieving market sentiment data\n";
      }
      
      formattedText += "\n";
      
      // Format key market indicators data
      formattedText += "**Key Market Indicators Data:**\n";
      
      if (allData.keyMarketIndicators && allData.keyMarketIndicators.success) {
        const keyMarketIndicatorsData = allData.keyMarketIndicators;
        
        // Format major indices if available
        if (keyMarketIndicatorsData.majorIndices && keyMarketIndicatorsData.majorIndices.length > 0) {
          formattedText += "- Major Indices:\n";
          
          // Sort indices alphabetically by name
          const sortedIndices = [...keyMarketIndicatorsData.majorIndices].sort((a, b) => {
            return a.name.localeCompare(b.name);
          });
          
          // Add each index
          for (const index of sortedIndices) {
            const priceStr = (index.price !== undefined && index.price !== null) ? 
                           index.price.toLocaleString() : 
                           "N/A";
            
            const percentChangeStr = (index.percentChange !== undefined && index.percentChange !== null) ? 
                               `${index.percentChange >= 0 ? "+" : ""}${formatValue(index.percentChange)}%` : 
                               "N/A";
            
            formattedText += `  * ${index.name}: ${priceStr} (${percentChangeStr})\n`;
          }
          
          // Add timestamp
          const timestamp = keyMarketIndicatorsData.majorIndices[0].timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
        
        // Format sector performance if available
        if (keyMarketIndicatorsData.sectorPerformance && keyMarketIndicatorsData.sectorPerformance.length > 0) {
          formattedText += "- Sector Performance:\n";
          
          // Sort sectors by performance (descending)
          const sortedSectors = [...keyMarketIndicatorsData.sectorPerformance].sort((a, b) => {
            if (a.percentChange === undefined || a.percentChange === null) return 1;
            if (b.percentChange === undefined || b.percentChange === null) return -1;
            return b.percentChange - a.percentChange;
          });
          
          // Add each sector
          for (const sector of sortedSectors) {
            const percentChangeStr = (sector.percentChange !== undefined && sector.percentChange !== null) ? 
                               `${sector.percentChange >= 0 ? "+" : ""}${formatValue(sector.percentChange)}%` : 
                               "N/A";
            
            formattedText += `  * ${sector.name}: ${percentChangeStr}\n`;
          }
          
          // Add timestamp
          const timestamp = keyMarketIndicatorsData.sectorPerformance[0].timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
        
        // Format CNN Fear & Greed Index
        if (keyMarketIndicatorsData.fearAndGreedIndex && !keyMarketIndicatorsData.fearAndGreedIndex.error) {
          formattedText += `* CNN Fear & Greed Index:\n`;
          formattedText += `  * Current: ${keyMarketIndicatorsData.fearAndGreedIndex.currentValue} (${keyMarketIndicatorsData.fearAndGreedIndex.rating})\n`;
          formattedText += `  * Previous Close: ${keyMarketIndicatorsData.fearAndGreedIndex.previousValue || "N/A"}\n`;
          formattedText += `  * One Week Ago: ${keyMarketIndicatorsData.fearAndGreedIndex.oneWeekAgo || "N/A"}\n`;
          formattedText += `  * One Month Ago: ${keyMarketIndicatorsData.fearAndGreedIndex.oneMonthAgo || "N/A"}\n`;
          formattedText += `  * One Year Ago: ${keyMarketIndicatorsData.fearAndGreedIndex.oneYearAgo || "N/A"}\n`;
          formattedText += `  * Last Updated: ${new Date(keyMarketIndicatorsData.fearAndGreedIndex.timestamp || new Date()).toLocaleString()}\n`;
        } else {
          formattedText += `* CNN Fear & Greed Index: Data not available\n`;
        }
        
        // Format VIX if available
        if (keyMarketIndicatorsData.volatilityIndices && keyMarketIndicatorsData.volatilityIndices.length > 0) {
          formattedText += `* Volatility Indices:\n`;
          
          // Add each volatility index
          for (const index of keyMarketIndicatorsData.volatilityIndices) {
            const valueStr = (index.value !== undefined && index.value !== null) ? 
                          index.value.toLocaleString() : 
                          "N/A";
            
            const percentChangeStr = (index.percentChange !== undefined && index.percentChange !== null) ? 
                               `${index.percentChange >= 0 ? "+" : ""}${formatValue(index.percentChange)}%` : 
                               "N/A";
            
            formattedText += `  * ${index.name}: ${valueStr} (${percentChangeStr})\n`;
          }
          
          // Add timestamp
          const timestamp = keyMarketIndicatorsData.volatilityIndices[0].timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        } else {
          formattedText += `* Volatility Indices: Data not available\n`;
        }
        
        // Format treasury yields data
        if (keyMarketIndicatorsData.treasuryYields && keyMarketIndicatorsData.treasuryYields.yields && keyMarketIndicatorsData.treasuryYields.yields.length > 0) {
          formattedText += `* Treasury Yields:\n`;
          
          // Sort yields by term (ascending)
          const sortedYields = [...keyMarketIndicatorsData.treasuryYields.yields].sort((a, b) => {
            const aMonths = parseTermToMonths(a.term);
            const bMonths = parseTermToMonths(b.term);
            return aMonths - bMonths;
          });
          
          // Add each yield
          for (const yield_ of sortedYields) {
            const yieldValue = yield_.yield !== undefined ? `${yield_.yield.toFixed(2)}%` : "N/A";
            const changeValue = yield_.change !== undefined ? 
                          `${yield_.change >= 0 ? "+" : ""}${yield_.change.toFixed(2)}%` : 
                          "N/A";
            
            formattedText += `  * ${yield_.term}: ${yieldValue} (${changeValue})\n`;
          }
          
          // Add timestamp
          const timestamp = keyMarketIndicatorsData.treasuryYields.timestamp || keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        }
        
        // Format upcoming economic events
        if (keyMarketIndicatorsData.upcomingEconomicEvents && keyMarketIndicatorsData.upcomingEconomicEvents.length > 0) {
          formattedText += `* Upcoming Economic Events:\n`;
          
          // Sort events by date (ascending)
          const sortedEvents = [...keyMarketIndicatorsData.upcomingEconomicEvents].sort((a, b) => {
            const dateA = new Date(a.date);
            const dateB = new Date(b.date);
            return dateA - dateB;
          });
          
          // Add each event (limit to 5 to avoid too much text)
          const eventsToShow = sortedEvents.slice(0, 5);
          for (const event of eventsToShow) {
            formattedText += `  * ${event.date}: ${event.event}\n`;
          }
          
          // If there are more events, add a note
          if (sortedEvents.length > 5) {
            formattedText += `  * ...and ${sortedEvents.length - 5} more events\n`;
          }
          
          // Add timestamp
          const timestamp = keyMarketIndicatorsData.timestamp || new Date().toLocaleString();
          formattedText += `  * Last Updated: ${new Date(timestamp).toLocaleString()}\n`;
        } else {
          formattedText += `* Upcoming Economic Events: Data not available\n`;
        }
      } else {
        formattedText += "- Error retrieving key market indicators data\n";
      }
      
      formattedText += "\n";
      
      // Format fundamental metrics data
      formattedText += "**Fundamental Metrics Data:**\n";
      
      // Define the symbols to include
      const symbols = [
        // Major Indices
        "SPY", "QQQ", "IWM", "DIA",
        // Magnificent Seven
        "AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA",
        // Other stocks
        "XOM", "CVX", "BA", "CAT", "PG"
      ];
      
      // Get mentioned stocks (if any)
      let mentionedStocks = [];
      if (allData.marketSentiment && allData.marketSentiment.success && allData.marketSentiment.data && allData.marketSentiment.data.analysts) {
        // Extract stock symbols from analyst comments
        allData.marketSentiment.data.analysts.forEach(analyst => {
          if (analyst.mentionedStocks && Array.isArray(analyst.mentionedStocks)) {
            mentionedStocks = mentionedStocks.concat(analyst.mentionedStocks);
          } else if (analyst.mentionedSymbols && Array.isArray(analyst.mentionedSymbols)) {
            // For backward compatibility
            mentionedStocks = mentionedStocks.concat(analyst.mentionedSymbols);
          }
        });
        
        // Remove duplicates
        mentionedStocks = [...new Set(mentionedStocks)];
        Logger.log(`Found ${mentionedStocks.length} mentioned stocks: ${mentionedStocks.join(', ')}`);
      }
      
      // Retrieve fundamental metrics data directly from FundamentalMetrics.gs
      Logger.log(`Retrieving fundamental metrics for ${symbols.length} symbols...`);
      const startTime = new Date();
      const fundamentalMetrics = retrieveFundamentalMetrics(symbols, mentionedStocks);
      const totalDuration = (new Date() - startTime) / 1000;
      
      // Track cache performance
      const cacheHits = fundamentalMetrics.cachePerformance ? fundamentalMetrics.cachePerformance.hits : 0;
      const cacheMisses = fundamentalMetrics.cachePerformance ? fundamentalMetrics.cachePerformance.misses : 0;
      
      Logger.log(`Fundamental metrics retrieval completed in ${totalDuration.toFixed(3)} seconds`);
      Logger.log(`Cache performance: ${cacheHits} hits, ${cacheMisses} misses`);
      
      // Format the fundamental metrics data for display
      if (fundamentalMetrics && fundamentalMetrics.data && fundamentalMetrics.data.length > 0) {
        // Group stocks into categories
        const majorIndices = ["SPY", "QQQ", "IWM", "DIA"];
        const magSeven = ["AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA"];
        
        const indices = fundamentalMetrics.data.filter(stock => majorIndices.includes(stock.symbol));
        const magnificentSeven = fundamentalMetrics.data.filter(stock => magSeven.includes(stock.symbol));
        const otherStocks = fundamentalMetrics.data.filter(stock => 
          !majorIndices.includes(stock.symbol) && !magSeven.includes(stock.symbol)
        );
        
        // Format major indices
        if (indices.length > 0) {
          formattedText += "- Major Indices:\n";
          for (const stock of indices) {
            formattedText = formatStockMetrics(stock, formattedText);
          }
        }
        
        // Format Magnificent Seven
        if (magnificentSeven.length > 0) {
          formattedText += "- Magnificent Seven:\n";
          for (const stock of magnificentSeven) {
            formattedText = formatStockMetrics(stock, formattedText);
          }
        }
        
        // Format other stocks
        if (otherStocks.length > 0) {
          formattedText += "- Other Stocks:\n";
          for (const stock of otherStocks) {
            formattedText = formatStockMetrics(stock, formattedText);
          }
        }
        
        // Add timestamp
        formattedText += `- Last Updated: ${new Date().toLocaleString()}\n`;
        
        // Add cache information
        formattedText += `- Cache Performance: ${cacheHits} hits, ${cacheMisses} misses\n`;
        formattedText += `- Execution Time: ${totalDuration.toFixed(3)} seconds\n`;
      } else {
        formattedText += "- No stock metrics data available\n";
      }
      
      formattedText += "\n";
      
      // Format macroeconomic factors data
      formattedText += "**Macroeconomic Factors Data:**\n";
      
      if (allData.macroeconomicFactors && allData.macroeconomicFactors.success) {
        const macroData = allData.macroeconomicFactors;
        
        // Format each macroeconomic factor
        if (macroData.inflation) {
          formattedText += "- Inflation:\n";
          formattedText += `  * CPI: ${formatValue(macroData.inflation.cpi)}%\n`;
          formattedText += `  * Core CPI: ${formatValue(macroData.inflation.coreCpi)}%\n`;
          formattedText += `  * PCE: ${formatValue(macroData.inflation.pce)}%\n`;
          formattedText += `  * Core PCE: ${formatValue(macroData.inflation.corePce)}%\n`;
          formattedText += `  * Last Updated: ${new Date(macroData.inflation.timestamp).toLocaleString()}\n`;
        }
        
        if (macroData.fedPolicy) {
          formattedText += "- Federal Reserve Policy:\n";
          formattedText += `  * Current Rate: ${formatValue(macroData.fedPolicy.currentRate)}%\n`;
          formattedText += `  * Last Meeting: ${new Date(macroData.fedPolicy.lastMeeting).toLocaleDateString()}\n`;
          formattedText += `  * Next Meeting: ${new Date(macroData.fedPolicy.nextMeeting).toLocaleDateString()}\n`;
          formattedText += `  * Last Updated: ${new Date(macroData.fedPolicy.timestamp).toLocaleString()}\n`;
        }
        
        if (macroData.geopoliticalRisks) {
          formattedText += "- Geopolitical Risks:\n";
          if (macroData.geopoliticalRisks.risks && macroData.geopoliticalRisks.risks.length > 0) {
            macroData.geopoliticalRisks.risks.forEach(risk => {
              formattedText += `  * ${risk.name}: ${risk.description}\n`;
              if (risk.impactLevel) {
                formattedText += `    - Impact Level: ${risk.impactLevel}\n`;
              }
              if (risk.source) {
                formattedText += `    - Source: ${risk.source}\n`;
              }
            });
          } else {
            formattedText += "  * No current geopolitical risks\n";
          }
          formattedText += `  * Last Updated: ${new Date(macroData.geopoliticalRisks.timestamp).toLocaleString()}\n`;
        }
      } else {
        formattedText += "- Error retrieving macroeconomic factors data\n";
      }
      
      formattedText += "\n";
      
      // Format fundamental metrics data
      formattedText += "**Fundamental Metrics Data:**\n";
      
      if (allData.fundamentalMetrics && allData.fundamentalMetrics.success) {
        const metricsData = allData.fundamentalMetrics;
        
        // Format each stock's metrics
        metricsData.stocks.forEach(stock => {
          formattedText += `* ${stock.symbol} (${stock.name}):\n`;
          formattedText += `  * Price: ${formatPriceData(stock)}\n`;
          formattedText += `  * Market Cap: ${formatMarketCap(stock.marketCap)}\n`;
          formattedText += `  * Volume: ${formatVolume(stock.volume)}\n`;
          formattedText += `  * Beta: ${formatValue(stock.beta, 'beta')}\n`;
          formattedText += `  * PEG Ratio: ${formatValue(stock.pegRatio)}\n`;
          formattedText += `  * Forward P/E: ${formatValue(stock.forwardPE)}\n`;
          formattedText += `  * Price/Book: ${formatValue(stock.priceToBook)}\n`;
          formattedText += `  * Price/Sales: ${formatValue(stock.priceToSales)}\n`;
          formattedText += `  * Debt/Equity: ${formatValue(stock.debtToEquity)}\n`;
          formattedText += `  * Return on Equity: ${formatValue(stock.returnOnEquity)}%\n`;
          formattedText += `  * Sector: ${stock.sector || "N/A"}\n`;
          formattedText += `  * Industry: ${stock.industry || "N/A"}\n`;
          formattedText += `  * Data Sources: ${stock.dataSource ? stock.dataSource.join(", ") : "N/A"}\n`;
          formattedText += `  * From Cache: ${stock.fromCache ? "Yes" : "No"}\n`;
          formattedText += `  * Last Updated: ${new Date(stock.timestamp).toLocaleString()}\n`;
          formattedText += "\n";
        });
      } else {
        formattedText += "- Error retrieving fundamental metrics data\n";
      }
      
      formattedText += "\n";
    } else {
      formattedText += "Error retrieving data: " + (allData ? allData.message : "Unknown error");
    }
    
    // Log the formatted text
    Logger.log("Data retrieval text generated successfully.");
    
    return formattedText;
  } catch (error) {
    Logger.log(`Error in generateDataRetrievalText: ${error}`);
    return `Error: ${error}`;
  }
}

/**
 * Retrieves all data needed for the trading analysis
 * @return {Object} All data needed for the trading analysis
 */
function retrieveAllData() {
  try {
    Logger.log("Retrieving all data for trading analysis...");
    
    // Get the current date
    const currentDate = new Date();
    
    // Retrieve market sentiment data
    const marketSentimentData = retrieveMarketSentiment();
    if (!marketSentimentData.success) {
      return {
        success: false,
        message: `Error retrieving market sentiment data: ${marketSentimentData.message}`
      };
    }
    
    // Extract mentioned stocks from market sentiment data
    let mentionedStocks = [];
    if (marketSentimentData.mentionedStocks && Array.isArray(marketSentimentData.mentionedStocks)) {
      mentionedStocks = marketSentimentData.mentionedStocks;
    } else {
      // Fallback to extracting from the data directly
      mentionedStocks = extractMentionedStocks(marketSentimentData);
    }
    
    Logger.log(`Mentioned stocks from market sentiment: ${mentionedStocks.length > 0 ? mentionedStocks.join(', ') : 'None'}`);
    
    // Retrieve key market indicators
    const keyMarketIndicatorsData = retrieveKeyMarketIndicators();
    if (!keyMarketIndicatorsData.success) {
      return {
        success: false,
        message: `Error retrieving key market indicators data: ${keyMarketIndicatorsData.message}`
      };
    }
    
    // Retrieve fundamental metrics for mentioned stocks
    const fundamentalMetricsData = retrieveFundamentalMetrics([], mentionedStocks);
    if (!fundamentalMetricsData.success) {
      return {
        success: false,
        message: `Error retrieving fundamental metrics data: ${fundamentalMetricsData.message}`
      };
    }
    
    // Retrieve macroeconomic factors
    const macroeconomicFactorsData = retrieveMacroeconomicFactors();
    if (!macroeconomicFactorsData.success) {
      return {
        success: false,
        message: `Error retrieving macroeconomic factors data: ${macroeconomicFactorsData.message}`
      };
    }
    
    // Compile all data
    const allData = {
      success: true,
      marketSentiment: marketSentimentData,
      keyMarketIndicators: keyMarketIndicatorsData,
      fundamentalMetrics: fundamentalMetricsData,
      macroeconomicFactors: macroeconomicFactorsData,
      timestamp: currentDate
    };
    
    Logger.log("All data retrieved successfully.");
    return allData;
  } catch (error) {
    Logger.log(`Error retrieving all data: ${error}`);
    return {
      success: false,
      error: true,
      message: `Failed to retrieve all data: ${error}`,
      timestamp: new Date()
    };
  }
}

function formatValue(value, metricType = 'default') {
  // Log the initial state
  console.log('formatValue called with:', {
    rawValue: value,
    type: typeof value,
    metricType: metricType
  });

  if (value === undefined || value === null) {
    console.log('Returning "N/A" for undefined/null value');
    return "N/A";
  }

  // Handle special cases
  if (value === Infinity || value === -Infinity) {
    console.log('Returning "Infinity" for Infinity value');
    return "Infinity";
  }

  // Convert to number if string
  if (typeof value === 'string') {
    console.log('Converting string to number:', value);
    // Try to parse as number, handling scientific notation
    value = parseFloat(value.replace(/,/g, ''));
    console.log('Converted value:', value);
  }

  // Convert to number if it's not already
  if (typeof value !== 'number') {
    console.log('Converting to number:', value);
    value = Number(value);
    console.log('Converted value:', value);
  }

  // Ensure we have a valid number
  if (!Number.isFinite(value)) {
    console.log('Invalid number value:', {
      value: value,
      type: typeof value,
      isNumber: Number.isFinite(value)
    });
    return "N/A";
  }

  // Format the number based on metric type
  if (metricType === 'beta') {
    return value.toFixed(2);
  }

  // Default formatting for other metrics
  return value.toLocaleString();
}
